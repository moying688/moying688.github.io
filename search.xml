<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>贪心算法</title>
      <link href="/2024/12/16/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>/2024/12/16/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="455-Assign-Cookies"><a href="#455-Assign-Cookies" class="headerlink" title="455. Assign Cookies"></a><a href="https://leetcode.cn/problems/assign-cookies/">455. Assign Cookies</a></h2><p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.</p><p>Each child <code>i</code> has a greed factor <code>g[i]</code>, which is the minimum size of a cookie that the child will be content with; and each cookie <code>j</code> has a size <code>s[j]</code>. If <code>s[j] &gt;= g[i]</code>, we can assign the cookie <code>j</code> to the child <code>i</code>, and the child <code>i</code> will be content. Your goal is to maximize the number of your content children and output the maximum number.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: g = [1,2,3], s = [1,1]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. </span><br><span class="line">And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.</span><br><span class="line">You need to output 1.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: g = [1,2], s = [1,2,3]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. </span><br><span class="line">You have 3 cookies and their sizes are big enough to gratify all of the children, </span><br><span class="line">You need to output 2.</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(g);</span><br><span class="line">        Arrays.sort(s);</span><br><span class="line">        <span class="type">int</span> len1=g.length;</span><br><span class="line">        <span class="type">int</span> len2=s.length;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j==len2)&#123;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(j&lt;len2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(g[i]&lt;=s[j]++)&#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="135-Candy"><a href="#135-Candy" class="headerlink" title="135. Candy"></a><a href="https://leetcode.cn/problems/candy/">135. Candy</a></h2><p>There are <code>n</code> children standing in a line. Each child is assigned a rating value given in the integer array <code>ratings</code>.</p><p>You are giving candies to these children subjected to the following requirements:</p><ul><li>Each child must have at least one candy.</li><li>Children with a higher rating get more candies than their neighbors.</li></ul><p>Return <em>the minimum number of candies you need to have to distribute the candies to the children</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ratings = [1,0,2]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ratings = [1,2,2]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.</span><br><span class="line">The third child gets 1 candy because it satisfies the above two conditions.</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> ratings.length;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[]candies = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        Arrays.fill(candies,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i]&gt;ratings[i-<span class="number">1</span>])&#123;</span><br><span class="line">                candies[i] = candies[i-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=length-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i-<span class="number">1</span>]&gt;ratings[i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(candies[i-<span class="number">1</span>]&lt;=candies[i])&#123;</span><br><span class="line">                candies[i-<span class="number">1</span>] = candies[i]+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; candies.length; i++) &#123;</span><br><span class="line">            sum+=candies[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="435-Non-overlapping-Intervals"><a href="#435-Non-overlapping-Intervals" class="headerlink" title="435. Non-overlapping Intervals"></a><a href="https://leetcode.cn/problems/non-overlapping-intervals/">435. Non-overlapping Intervals</a></h2><p>Given an array of intervals <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, return <em>the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping</em>.</p><p><strong>Note</strong> that intervals which only touch at a point are <strong>non-overlapping</strong>. For example, <code>[1, 2]</code> and <code>[2, 3]</code> are non-overlapping.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: intervals = [[1,2],[2,3],[3,4],[1,3]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: intervals = [[1,2],[1,2],[1,2]]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: intervals = [[1,2],[2,3]]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: You don&#x27;t need to remove any of the intervals since they&#x27;re already non-overlapping.</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span> || length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(intervals, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(end&gt;intervals[i][<span class="number">0</span>])&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                end=Math.min(intervals[i][<span class="number">1</span>],end);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end=intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="605-Can-Place-Flowers-Defensive-Programming"><a href="#605-Can-Place-Flowers-Defensive-Programming" class="headerlink" title="605. Can Place Flowers(Defensive Programming)"></a><a href="https://leetcode.cn/problems/can-place-flowers/">605. Can Place Flowers(Defensive Programming)</a></h2><p>You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in <strong>adjacent</strong> plots.</p><p>Given an integer array <code>flowerbed</code> containing <code>0</code>‘s and <code>1</code>‘s, where <code>0</code> means empty and <code>1</code> means not empty, and an integer <code>n</code>, return <code>true</code> <em>if</em> <code>n</code> <em>new flowers can be planted in the</em> <code>flowerbed</code> <em>without violating the no-adjacent-flowers rule and</em> <code>false</code> <em>otherwise</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: flowerbed = [1,0,0,0,1], n = 1</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: flowerbed = [1,0,0,0,1], n = 2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h3 id="first-idea"><a href="#first-idea" class="headerlink" title="first idea"></a>first idea</h3><blockquote><p>Firstly, if we want to be Greedy, it is great way that planting the </p><p>flower when left and right is zero.</p><p>Off course, we can find a problem when we  coding it, we must notice the start and end of array.</p><p>Clearly, we can use a way named Defensive Programming</p><p>we can expand original array two capacity to get a new array </p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPlaceFlowers</span><span class="params">(<span class="type">int</span>[] flowerbed,<span class="type">int</span> n)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> flowerbed.length;</span><br><span class="line">        <span class="type">int</span>[] newPlots = <span class="keyword">new</span> <span class="title class_">int</span>[length+<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> newPlots.length;</span><br><span class="line">        newPlots[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        newPlots[len-<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        System.arraycopy(flowerbed,<span class="number">0</span>,newPlots,<span class="number">1</span>,length);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; len -<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(newPlots[i]!=<span class="number">1</span>&amp;&amp;newPlots[i-<span class="number">1</span>]==<span class="number">0</span>&amp;&amp;newPlots[i+<span class="number">1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                newPlots[i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans&gt;=n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="second-idea"><a href="#second-idea" class="headerlink" title="second idea"></a>second idea</h3><blockquote></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## [<span class="number">452.</span> Minimum Number of Arrows to Burst Balloons](https:<span class="comment">//leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a <span class="number">2D</span> integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You <span class="keyword">do</span> not know the exact y-coordinates of the balloons.</span><br><span class="line"></span><br><span class="line">Arrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` <span class="keyword">if</span> `xstart &lt;= x &lt;= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.</span><br><span class="line"></span><br><span class="line">Given the array `points`, <span class="keyword">return</span> *the **minimum** number of arrows that must be shot to burst all balloons*.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">**Example <span class="number">1</span>:**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Input: points &#x3D; [[10,16],[2,8],[1,6],[7,12]]<br>Output: 2<br>Explanation: The balloons can be burst by 2 arrows:</p><ul><li>Shoot an arrow at x &#x3D; 6, bursting the balloons [2,8] and [1,6].</li><li>Shoot an arrow at x &#x3D; 11, bursting the balloons [10,16] and [7,12].<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Example 2:**</span><br><span class="line"></span><br></pre></td></tr></table></figure>Input: points &#x3D; [[1,2],[3,4],[5,6],[7,8]]<br>Output: 4<br>Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**Example 3:**</span><br><span class="line"></span><br></pre></td></tr></table></figure>Input: points &#x3D; [[1,2],[2,3],[3,4],[4,5]]<br>Output: 2<br>Explanation: The balloons can be burst by 2 arrows:</li><li>Shoot an arrow at x &#x3D; 2, bursting the balloons [1,2] and [2,3].</li><li>Shoot an arrow at x &#x3D; 4, bursting the balloons [3,4] and [4,5].</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### WTF</span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int findMinArrowShots(int[][] points) &#123;</span><br><span class="line">        int length = points.length;</span><br><span class="line">        if(length==0||length==1)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans = 1;</span><br><span class="line">        Arrays.sort(points, (a, b) -&gt; Integer.compare(a[0], b[0]));</span><br><span class="line">        int end = points[0][1];</span><br><span class="line">        for (int i = 1; i &lt; points.length; i++) &#123;</span><br><span class="line">            if(points[i][0]&gt;end)&#123;</span><br><span class="line">                ans ++;</span><br><span class="line">                end = points[i][1];</span><br><span class="line">            &#125;else if(points[i][0]&lt;end)&#123;</span><br><span class="line">                end = Math.min(end,points[i][1]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="763-Partition-Labels"><a href="#763-Partition-Labels" class="headerlink" title="763. Partition Labels"></a><a href="https://leetcode.cn/problems/partition-labels/">763. Partition Labels</a></h2><p>You are given a string <code>s</code>. We want to partition the string into as many parts as possible so that each letter appears in at most one part.</p><p>Note that the partition is done so that after concatenating all the parts in order, the resultant string should be <code>s</code>.</p><p>Return <em>a list of integers representing the size of these parts</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;ababcbacadefegdehijhklij&quot;</span><br><span class="line">Output: [9,7,8]</span><br><span class="line">Explanation:</span><br><span class="line">The partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.</span><br><span class="line">This is a partition so that each letter appears in at most one part.</span><br><span class="line">A partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits s into less parts.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;eccbbbbdec&quot;</span><br><span class="line">Output: [10]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">partitionLabels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> []arrays  = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            arrays[c-<span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 一直走，谁最后落点最大就走到哪</span></span><br><span class="line">            end = Math.max(end,arrays[s.charAt(i)-<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">            <span class="keyword">if</span>(end==i)&#123;</span><br><span class="line">                result.add(end-start+<span class="number">1</span>);</span><br><span class="line">                start = end+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="122-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#122-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="122. Best Time to Buy and Sell Stock II"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122. Best Time to Buy and Sell Stock II</a></h2><p>You are given an integer array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p><p>On each day, you may decide to buy and&#x2F;or sell the stock. You can only hold <strong>at most one</strong> share of the stock at any time. However, you can buy it then immediately sell it on the <strong>same day</strong>.</p><p>Find and return <em>the <strong>maximum</strong> profit you can achieve</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [7,1,5,3,6,4]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.</span><br><span class="line">Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.</span><br><span class="line">Total profit is 4 + 3 = 7.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [1,2,3,4,5]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.</span><br><span class="line">Total profit is 4.</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: prices = [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prices.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i+<span class="number">1</span>]&gt;prices[i])&#123;</span><br><span class="line">                max += prices[i+<span class="number">1</span>]-prices[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="406-Queue-Reconstruction-by-Height"><a href="#406-Queue-Reconstruction-by-Height" class="headerlink" title="406. Queue Reconstruction by Height"></a><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/">406. Queue Reconstruction by Height</a></h2><p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [hi, ki]</code> represents the <code>ith</code> person of height <code>hi</code> with <strong>exactly</strong> <code>ki</code> other people in front who have a height greater than or equal to <code>hi</code>.</p><p>Reconstruct and return <em>the queue that is represented by the input array</em> <code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [hj, kj]</code> is the attributes of the <code>jth</code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br><span class="line">Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span><br><span class="line">Explanation:</span><br><span class="line">Person 0 has height 5 with no other people taller or the same height in front.</span><br><span class="line">Person 1 has height 7 with no other people taller or the same height in front.</span><br><span class="line">Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.</span><br><span class="line">Person 3 has height 6 with one person taller or the same height in front, which is person 1.</span><br><span class="line">Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.</span><br><span class="line">Person 5 has height 7 with one person taller or the same height in front, which is person 1.</span><br><span class="line">Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]</span><br><span class="line">Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;</span><br><span class="line">        <span class="comment">// [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]] 输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span></span><br><span class="line">        <span class="comment">// 按照第一个元素降序排序得到(同时保证相同时，第二个元素升序)  [[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]]</span></span><br><span class="line">        Arrays.sort(people,(a,b)-&gt;b[<span class="number">0</span>] != a[<span class="number">0</span>] ? b[<span class="number">0</span>]-a[<span class="number">0</span>] : a[<span class="number">1</span>]-b[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 现在每个元素前面都是大于等于自己的元素</span></span><br><span class="line">        <span class="comment">// 7.0</span></span><br><span class="line">        <span class="comment">// 7,0 7,1</span></span><br><span class="line">        <span class="comment">// 7,0 6,1 7,1</span></span><br><span class="line">        <span class="comment">// 5,0 7,0 6,1 7,1</span></span><br><span class="line">        <span class="comment">// 5,0 7,0 5,2 6,1 7,1</span></span><br><span class="line">        LinkedList&lt;<span class="type">int</span>[]&gt; list =<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] person : people) &#123;</span><br><span class="line">            list.add(person[<span class="number">1</span>], person);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[list.size()][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="665-Non-decreasing-Array"><a href="#665-Non-decreasing-Array" class="headerlink" title="665. Non-decreasing Array"></a><a href="https://leetcode.cn/problems/non-decreasing-array/">665. Non-decreasing Array</a></h2><p>Given an array <code>nums</code> with <code>n</code> integers, your task is to check if it could become non-decreasing by modifying <strong>at most one element</strong>.</p><p>We define an array is non-decreasing if <code>nums[i] &lt;= nums[i + 1]</code> holds for every <code>i</code> (<strong>0-based</strong>) such that (<code>0 &lt;= i &lt;= n - 2</code>).</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,2,3]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: You could modify the first 4 to 1 to get a non-decreasing array.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [4,2,1]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: You cannot get a non-decreasing array by modifying at most one element.</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkPossibility</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// flag 表示还能否进行交换</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> nums[<span class="number">0</span>] &lt;= nums[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="comment">//                    [3,4,2,3]</span></span><br><span class="line">                    <span class="comment">// 1 4 2</span></span><br><span class="line">                    <span class="comment">// 要么变大 i+1 要么 变小i</span></span><br><span class="line">                    <span class="keyword">if</span>(nums[i-<span class="number">1</span>]&lt;=nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                        nums[i] = nums[i+<span class="number">1</span>]; <span class="comment">// 变小</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        nums[i+<span class="number">1</span>] = nums[i]; <span class="comment">// 变大</span></span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> argorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> argorithm </tag>
            
            <tag> Javam </tag>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ learn</title>
      <link href="/2024/11/21/middleWork/RabbitMQ/"/>
      <url>/2024/11/21/middleWork/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ相关介绍"><a href="#RabbitMQ相关介绍" class="headerlink" title="RabbitMQ相关介绍"></a>RabbitMQ相关介绍</h1><p>最好的学习文档： <a href="https://www.rabbitmq.com/tutorials/tutorial-one-java">RabbitMQ 教程 - “Hello World！” |RabbitMQ 函数 — RabbitMQ tutorial - “Hello World!” | RabbitMQ</a></p><h2 id="什么是消息队列-为什么使用？"><a href="#什么是消息队列-为什么使用？" class="headerlink" title="什么是消息队列 &amp; 为什么使用？"></a>什么是消息队列 &amp; 为什么使用？</h2><blockquote><p>Message Queue</p></blockquote><p>顾名思义，存储消息的队列。</p><p>先来说说一个场景，以前送外卖的话或者送快递之类的，都是点到点，也就是快递小哥会直接送到你家，要是敲门发现不在，给你打个电话，此时你好像不得不回去？</p><p>其实先不说菜鸟驿站或者外卖柜。你们家家门口那块地就勉强算得上消息队列了，只不过不能保证安全，<del>其他人也可以消费</del>（bushi）</p><p>快递小哥只需要把快递放到你家门口，然后通过软件或者发短信，提醒你，就可以去干自己的事情了。而且你也不用马上去处理这个快递而打断当下做的事情。</p><blockquote><p><strong>什么是消息队列</strong><br>MQ全称为Message Queue，即消息队列。“消息队列”是在消息的传输过程中保存消息的容器。它是典型的：生产者、消费者模型。生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入，这样就实现了生产者和消费者的解耦。</p></blockquote><p>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</p><h3 id="各种知名消息队列优劣"><a href="#各种知名消息队列优劣" class="headerlink" title="各种知名消息队列优劣"></a>各种知名消息队列优劣</h3><h3 id="RabbitMQ-工作原理"><a href="#RabbitMQ-工作原理" class="headerlink" title="RabbitMQ 工作原理"></a>RabbitMQ 工作原理</h3> <img src="11/21/middleWork/RabbitMQ/image-20241121122826180.png" class title="image-20241121122826180"><ul><li>Broker: 消息队列服务进程</li><li>Exchange: 交换机，通过管道接受生产者信息，再通过一定规则将信息转发给某个队列（过滤消息）</li><li>Queue：消息队列，存储信息的队列，消息到达队列则会转发给指定的消费者</li><li>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送</li><li>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。</li></ul><h1 id="RabbitMQ-快速入门"><a href="#RabbitMQ-快速入门" class="headerlink" title="RabbitMQ 快速入门"></a>RabbitMQ 快速入门</h1><h2 id="六种消息模型"><a href="#六种消息模型" class="headerlink" title="六种消息模型"></a>六种消息模型</h2><h3 id="Simple"><a href="#Simple" class="headerlink" title="Simple"></a>Simple</h3><p>简单队列： 简单的点对点服务</p><img src="11/21/middleWork/RabbitMQ/image-20241121123402772.png" class title="image-20241121123402772"><p><strong>生产者</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.moying.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.moying.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建通道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel = connection.createChannel();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数1：队列名称   参数2：是否持久化  参数3：是否独占  参数4：是否自动删除  参数5：其他参数 比如 TTL 等</span></span><br><span class="line"><span class="comment">             * 创建队列</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发送消息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello RabbitMQ!&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> channel != <span class="literal">null</span>;</span><br><span class="line">            channel.close();</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.moying.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.moying.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Recv</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">// 创建会话通道，生产者和mq服务所有通信都在channel通道中完成</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 实现消费方法</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="comment">// 当接收到消息后此方法将被调用</span></span><br><span class="line">            <span class="comment">// 参数1：消费者标签 参数2：消息队列信息 参数3：消息属性 参数4：消息内容</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟异常</span></span><br><span class="line">    <span class="comment">//                int i = 1/0;</span></span><br><span class="line">                <span class="comment">// 交换机</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">exchange</span> <span class="operator">=</span> envelope.getExchange();</span><br><span class="line">                <span class="comment">// 消息id，mq在channel中用来标识消息的id，可用于确认消息已接收</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> envelope.getDeliveryTag();</span><br><span class="line">                <span class="comment">// body 消息内容</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot; [x] Received &#x27;&quot;</span> + msg + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 手动ack</span></span><br><span class="line">                <span class="comment">// 参数1：消息id，参数2：是否批量确认</span></span><br><span class="line"><span class="comment">//                multiple：是否批量.true:将一次性ack所有小于deliveryTag的消息</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    channel.basicAck(deliveryTag, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 监听队列，第二个参数为是否自动确认，true表示自动确认 callback为回调函数</span></span><br><span class="line"><span class="comment">//        channel.basicConsume(QUEUE_NAME, true, consumer);</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="work"><a href="#work" class="headerlink" title="work"></a>work</h3><p>工作队列：一对多，分工合作消费</p><blockquote><p>The main idea behind Work Queues (aka: <em>Task Queues</em>) is to avoid doing a resource-intensive task immediately and having to wait for it to complete. Instead we schedule the task to be done later. We encapsulate a <em>task</em> as a message and send it to a queue. A worker process running in the background will pop the tasks and eventually execute the job. When you run many workers the tasks will be shared between them.</p></blockquote><img src="11/21/middleWork/RabbitMQ/image-20241121124223926.png" class title="image-20241121124223926"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.moying.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.moying.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkSend</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 循环发布任务</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span>  <span class="operator">=</span> <span class="string">&quot;task....&quot;</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="literal">null</span>, message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot; [x] Sent &#x27;&quot;</span> + message + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            Thread.sleep(i*<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.moying.demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.moying.utils.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.DefaultConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkRecv1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;test_work_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception  &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionUtil.getConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 只接收一条未确认的消息</span></span><br><span class="line">      <span class="comment">//  channel.basicQos(1);</span></span><br><span class="line">        <span class="type">DefaultConsumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, com.rabbitmq.client.Envelope envelope, com.rabbitmq.client.AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                System.out.println(<span class="string">&quot; [Consumer 1] Received &#x27;&quot;</span> + msg + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    channel.basicAck(envelope.getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, consumer);</span><br><span class="line"><span class="comment">//        channel.basicConsume(QUEUE_NAME, true, consumer);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="11/21/middleWork/RabbitMQ/image-20241121125620346.png" class title="image-20241121125620346"><img src="11/21/middleWork/RabbitMQ/image-20241121125628037.png" class title="image-20241121125628037"><p>默认情况下这里会是C1和C2均摊消息进行消费，比如P发送50条，C1和C2各处理25条，但显然不太行（没有考虑C1和C2之间的设备性能差距等等）</p><p>所以可以通过设置</p><img src="11/21/middleWork/RabbitMQ/image-20241121124455468.png" class title="image-20241121124455468"><p>让消费者处理完一条消息之后再去接收消息进行消费而不是囤积</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">prefetchCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br></pre></td></tr></table></figure><blockquote><p> Note about queue size</p><p>If all the workers are busy, your queue can fill up. You will want to keep an eye on that, and maybe add more workers, or have some other strategy.</p></blockquote><h4 id="ACK-机制"><a href="#ACK-机制" class="headerlink" title="ACK 机制"></a>ACK 机制</h4><p>消息一旦被消费者接收，队列中的消息就被删除了。RabbitMQ是通过何种机制呢？</p><p>如果有了解TCP的话，应该就会恍然大悟（并且本身Producer，Broker，Consumer也是通过TCP连接的）</p><p>当消费者获取消息后，会向RabbitMQ发送回执ACK，告知消息已经被接收。不过这种回执ACK分两种情况：</p><ul><li>自动ACK：消息一旦被接收，消费者自动发送ACK</li><li>手动ACK：消息接收后，不会发送ACK，需要手动调用</li></ul><p>这里需要考虑场景去判断选择哪种更好</p><ul><li>如果是牵扯到钱之类的，肯定是得手动消费，得等到相关业务完成之后再去发送ACK，不然中途要是崩了，数据库方面进行回滚，但是你自动Ack后这条消息就没了啊。</li><li>如果是不太重要的消息，无脑自动吧（额，阅历不够，不清楚那些算不重要）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听队列，第二个参数false，手动进行ACK</span></span><br><span class="line">       channel.basicConsume(QUEUE_NAME, <span class="literal">false</span>, consumer);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动进行ACK</span></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                *  void basicAck(long deliveryTag, boolean multiple) throws IOException;</span></span><br><span class="line"><span class="comment">                *  deliveryTag:用来标识消息的id</span></span><br><span class="line"><span class="comment">                *  multiple：是否批量.true:将一次性ack所有小于deliveryTag的消息。</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">channel.basicAck(envelope.getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里的multiple 不就跟TCP 的S-ACK很像嘛，我觉得底层应该就是这个</p></blockquote><h2 id="Publish-SubScirbe"><a href="#Publish-SubScirbe" class="headerlink" title="Publish&#x2F;SubScirbe"></a>Publish&#x2F;SubScirbe</h2><h3 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h3><h3 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h3><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><h3 id="交换机类型"><a href="#交换机类型" class="headerlink" title="交换机类型"></a>交换机类型</h3><blockquote><p>routingkey ,routing pattern</p></blockquote><p>Fanout: 广播，</p><p>Direct： 定向，</p><p>Topic： 通配符，</p><p>Header： （<a href="https://blog.csdn.net/zhu_tianwei/article/details/40923131%EF%BC%89">https://blog.csdn.net/zhu_tianwei/article/details/40923131）</a></p><h2 id="整合Springboot"><a href="#整合Springboot" class="headerlink" title="整合Springboot"></a>整合Springboot</h2>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> 并发 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simpleShop</title>
      <link href="/2024/11/19/Java%E9%A1%B9%E7%9B%AE/Shop/"/>
      <url>/2024/11/19/Java%E9%A1%B9%E7%9B%AE/Shop/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBiliBili</title>
      <link href="/2024/11/19/Java%E9%A1%B9%E7%9B%AE/bilibili/"/>
      <url>/2024/11/19/Java%E9%A1%B9%E7%9B%AE/bilibili/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>build your Hexo</title>
      <link href="/2024/11/19/hexoTest/"/>
      <url>/2024/11/19/hexoTest/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Hexo-框架搭建博客"><a href="#使用Hexo-框架搭建博客" class="headerlink" title="使用Hexo 框架搭建博客"></a>使用Hexo 框架搭建博客</h1><h2 id="解决没有钱买图床的问题"><a href="#解决没有钱买图床的问题" class="headerlink" title="解决没有钱买图床的问题"></a>解决没有钱买图床的问题</h2><ol><li>首先设置好typora的图片保存（这样在我们插入图片的时候会生成一个同名文件夹用来保存图片资源）</li></ol><img src="11/19/hexoTest/image-20241119214157661.png" class title="image-20241119214157661"><ol start="2"><li>安装以及修改插件</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image -- save</span><br></pre></td></tr></table></figure><img src="11/19/hexoTest/image-20241119214305870.png" class title="image-20241119214305870"><p>此时再使用命令查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂货 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/15/Java%E5%9F%BA%E7%A1%80/JAVA%20BIO/"/>
      <url>/2024/11/15/Java%E5%9F%BA%E7%A1%80/JAVA%20BIO/</url>
      
        <content type="html"><![CDATA[<h1 id="Netty-学习"><a href="#Netty-学习" class="headerlink" title="Netty 学习"></a>Netty 学习</h1><h2 id="JAVA-BIO"><a href="#JAVA-BIO" class="headerlink" title="JAVA BIO"></a>JAVA BIO</h2><h2 id="JAVA-NIO"><a href="#JAVA-NIO" class="headerlink" title="JAVA NIO"></a>JAVA NIO</h2><p><img src="https://dongzl.github.io/netty-handbook/_media/chapter03/chapter03_01.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/11/12/Java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2024/11/12/Java%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p><img src="play\Butterfly\source_posts\多线程\image-20241116070218774.png" alt="image-20241116070218774"></p><h2 id="线程实现"><a href="#线程实现" class="headerlink" title="线程实现"></a>线程实现</h2><blockquote><p> demo</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread1</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TestThread1</span> <span class="variable">testThread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread1</span>();</span><br><span class="line">        testThread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><h3 id="实现Runnable类"><a href="#实现Runnable类" class="headerlink" title="实现Runnable类"></a>实现Runnable类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread_learn.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Race</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 胜利者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> gameOver(i);</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;跑了&quot;</span> + i + <span class="string">&quot;米&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否完成比赛</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">gameOver</span><span class="params">(<span class="type">int</span> steps)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(winner != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(steps &gt;= <span class="number">100</span>)&#123;</span><br><span class="line">              winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(<span class="string">&quot;winner is &quot;</span> + winner);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Race</span> <span class="variable">race</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Race</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race, <span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(race, <span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>callable</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        TestCallable testCallable = new TestCallable();</span></span><br><span class="line"><span class="comment">//        Integer call = testCallable.call();</span></span><br><span class="line"><span class="comment">//        System.out.println(call);</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        Future&lt;Integer&gt; result = executorService.submit(<span class="keyword">new</span> <span class="title class_">TestCallable</span>());</span><br><span class="line"></span><br><span class="line">        System.out.println(result.get());</span><br><span class="line">        executorService.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="play\Butterfly\source_posts\多线程\image-20241112151637354.png" alt="image-20241112151637354"></p><p><img src="play\Butterfly\source_posts\多线程\image-20241112151818920.png" alt="image-20241112151818920"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread_learn.demo3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议使用标志位</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span>  <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...Thread&quot;</span> + i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestStop</span> <span class="variable">testStop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestStop</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testStop).start();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">900</span>)&#123;</span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><blockquote><p>多个线程操作同一个资源</p></blockquote><h3 id="出现死锁的必要条件"><a href="#出现死锁的必要条件" class="headerlink" title="出现死锁的必要条件"></a>出现死锁的必要条件</h3><p><img src="play\Butterfly\source_posts\多线程.assets\image-20241115162532352.png" alt="image-20241115162532352"></p><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><h3 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h3><blockquote><p>生产者消费者模式</p></blockquote><p><img src="play\Butterfly\source_posts\多线程\image-20241115164237230.png" alt="image-20241115164237230"></p><h4 id="管程法"><a href="#管程法" class="headerlink" title="管程法"></a>管程法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread_learn.PC_model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者，消费者，产品，缓存区</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ChickenBuffer</span> <span class="variable">chickenBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChickenBuffer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Producer</span>(chickenBuffer).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Consumer</span>(chickenBuffer).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    ChickenBuffer chickenBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(ChickenBuffer chickenBuffer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chickenBuffer = chickenBuffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            chickenBuffer.push(<span class="keyword">new</span> <span class="title class_">Chicken</span>(i+<span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    ChickenBuffer chickenBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(ChickenBuffer chickenBuffer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chickenBuffer = chickenBuffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">Chicken</span> <span class="variable">pop</span> <span class="operator">=</span> chickenBuffer.pop();</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了第&quot;</span> + pop.id + <span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChickenBuffer</span> &#123;</span><br><span class="line"></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> <span class="title class_">Chicken</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Chicken chicken)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果满了 ，等待消费者消费</span></span><br><span class="line">        <span class="keyword">while</span> (count == chickens.length) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有满，生产鸡</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以通知消费者消费了</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否能够消费</span></span><br><span class="line">        <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 等待生产者生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        <span class="type">Chicken</span> <span class="variable">chicken</span> <span class="operator">=</span> chickens[count];</span><br><span class="line">        <span class="comment">// 吃了，通知生产者生产</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="信号灯法"><a href="#信号灯法" class="headerlink" title="信号灯法"></a>信号灯法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Thread_learn.PC_model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号灯法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPC2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TV</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TV</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Player</span>(tv).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Audience</span>(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者--- 演员</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(TV tv)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 演员</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 演员表演</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;奇葩说&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;太污了，喝瓶立白洗洗嘴&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消费者---观众</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Audience</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    TV tv ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Audience</span><span class="params">(TV tv)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 观众</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 观看表演</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 产品-- 节目</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span>&#123;</span><br><span class="line">    String voice;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">play</span> <span class="params">(String voice)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;表演了：&quot;</span> + voice);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.voice = voice;</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">watch</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观看了：&quot;</span> + voice);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.flag =!<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LOCK-Condition"><a href="#LOCK-Condition" class="headerlink" title="LOCK &amp; Condition"></a>LOCK &amp; Condition</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.moying.LockDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;PipeLine&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PipeLine</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Member</span> <span class="variable">member</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                member.PrintA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                member.PrintB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                member.PrintC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Member</span> &#123;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">ant</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">conditionA</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">conditionB</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">conditionC</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintA</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (ant != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conditionA.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           log.info(<span class="string">&quot;AAAAAAAAAAAAAAAA&quot;</span>);</span><br><span class="line">            ant = <span class="number">2</span>;</span><br><span class="line">            conditionC.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintB</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (ant != <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conditionB.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;BBBBBBBBBBBBBBBBBBB&quot;</span>);</span><br><span class="line"></span><br><span class="line">            ant = <span class="number">1</span>;</span><br><span class="line">            conditionA.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrintC</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (ant != <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conditionC.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;CCCCCCCCCCCCCCCCCCCCC&quot;</span>);</span><br><span class="line">            ant = <span class="number">3</span>;</span><br><span class="line">            conditionB.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><blockquote><p>ExectorService &amp; Exectors.new****</p></blockquote><h2 id="八锁问题"><a href="#八锁问题" class="headerlink" title="八锁问题"></a>八锁问题</h2><h4 id="所谓的“线程八锁”"><a href="#所谓的“线程八锁”" class="headerlink" title="所谓的“线程八锁”"></a>所谓的“线程八锁”</h4><p>其实就是看 synchronized 锁住的是哪个对象</p><p>情况1：12 或 21都是有可能的，就看cpu先调度哪个线程</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>(topic = <span class="string">&quot;c.Number&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span> n1 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">a</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">b</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况2：1s后12，或 2 1s后 1 ，还是看cpu先调度哪个线程</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>(topic = <span class="string">&quot;c.Number&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1</span>); <span class="comment">//睡眠1秒</span></span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span> n1 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">a</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">b</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况3：3 1s后 12 、 23 1s后 1 、 32 1s后 1，3肯定是最开始的打印的，就看1或2谁先打印</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>(topic = <span class="string">&quot;c.Number&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1</span>);<span class="comment">//睡眠1秒</span></span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">c</span>(<span class="params"></span>) &#123; <span class="comment">// 未加锁</span></span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span> n1 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">a</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">b</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">c</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况4：2 1s 后 1，没有互斥，同时运行，2先打印，sleep 1秒后打印1</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>(topic = <span class="string">&quot;c.Number&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1</span>);<span class="comment">//睡眠1秒</span></span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span> n1 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="title class_">Number</span> n2 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">a</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n2.<span class="title function_">b</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况5：2 1s 后 1，锁住的对象不同，所以和题4一样，不存在互斥。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>(topic = <span class="string">&quot;c.Number&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> synchronized <span class="built_in">void</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1</span>);<span class="comment">//睡眠1秒</span></span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span> n1 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">a</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">b</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况6：1s 后12， 或 2 1s后 1，还是看cpu先调度哪个线程</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>(topic = <span class="string">&quot;c.Number&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> synchronized <span class="built_in">void</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1</span>);<span class="comment">//睡眠1秒</span></span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> synchronized <span class="built_in">void</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span> n1 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">a</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">b</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况7：2 1s 后 1，锁住的对象不同，所以和题4一样，不存在互斥。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>(topic = <span class="string">&quot;c.Number&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> synchronized <span class="built_in">void</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1</span>);<span class="comment">//睡眠1秒</span></span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> synchronized <span class="built_in">void</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span> n1 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="title class_">Number</span> n2 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">a</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n2.<span class="title function_">b</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况8：1s 后12， 或 2 1s后 1，锁着的同一个对象，还是看cpu先调度哪个线程</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>(topic = <span class="string">&quot;c.Number&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> synchronized <span class="built_in">void</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">1</span>);<span class="comment">//睡眠1秒</span></span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> synchronized <span class="built_in">void</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">Number</span> n1 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="title class_">Number</span> n2 = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.<span class="title function_">a</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n2.<span class="title function_">b</span>(); &#125;).<span class="title function_">start</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级主题"><a href="#高级主题" class="headerlink" title="高级主题"></a>高级主题</h2><h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.moying.callable_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;TestCallable&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCallable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.创建线程</span></span><br><span class="line">        <span class="comment">// 2.创建Callable接口实现类</span></span><br><span class="line">        <span class="comment">// 3.创建FutureTask对象</span></span><br><span class="line">        <span class="comment">// 4.将Callable接口实现类对象传递到FutureTask构造器中</span></span><br><span class="line">        <span class="comment">// 5.创建Thread对象并将FutureTask对象传递到Thread构造器中</span></span><br><span class="line">        <span class="comment">// 6.调用start方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">myCallable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line">         FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(myCallable);</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取Callable接口实现类中的call方法的返回值</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> futureTask.get(); <span class="comment">// 这个get方法可能会产生阻塞</span></span><br><span class="line">            log.info(<span class="string">&quot;返回值为：&quot;</span>+integer); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call()方法执行了&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用辅助类"><a href="#常用辅助类" class="headerlink" title="常用辅助类"></a>常用辅助类</h2><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>减法器</p><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>加法器</p><h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>类比停车位（或者对比取令牌）</p><h2 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h2><p><img src="play\Butterfly\source_posts\多线程\image-20241119211116506.png" alt="image-20241119211116506"></p><p><img src="play\Butterfly\source_posts\多线程.assets\image-20241117224451835.png" alt="image-20241117224451835"></p><h2 id="线程池-1"><a href="#线程池-1" class="headerlink" title="线程池"></a>线程池</h2><p>线程池：三大方式、七大参数、四种拒绝策略</p><p>池化技术</p><p>程序的运行，本质：占用系统的资源！我们需要去优化资源的使用 &#x3D;&#x3D;&#x3D;&gt; 池化技术</p><p>线程池、JDBC的连接池、内存池、对象池 等等。。。。</p><p>资源的创建、销毁十分消耗资源</p><p>池化技术：事先准备好一些资源，如果有人要用，就来我这里拿，用完之后还给我，以此来提高效率。</p><p>1）线程池的好处：<br>1、降低资源的消耗；</p><p>2、提高响应的速度；</p><p>3、方便管理；</p><p>线程复用、可以控制最大并发数、管理线程；</p><p>2）线程池：三大方法<br>ExecutorService threadPool &#x3D; Executors.newSingleThreadExecutor();&#x2F;&#x2F;单个线程<br>ExecutorService threadPool2 &#x3D; Executors.newFixedThreadPool(5); &#x2F;&#x2F;创建一个固定的线程池的大小<br>ExecutorService threadPool3 &#x3D; Executors.newCachedThreadPool(); &#x2F;&#x2F;可伸缩的<br>工具类 Executors 三大方法；<br>public class Demo01 {<br>    public static void main(String[] args) {</p><pre><code>    ExecutorService threadPool = Executors.newSingleThreadExecutor();//单个线程    ExecutorService threadPool2 = Executors.newFixedThreadPool(5); //创建一个固定的线程池的大小    ExecutorService threadPool3 = Executors.newCachedThreadPool(); //可伸缩的    //线程池用完必须要关闭线程池    try &#123;        for (int i = 1; i &lt;=100 ; i++) &#123;            //通过线程池创建线程            threadPool.execute(()-&gt;&#123;                System.out.println(Thread.currentThread().getName()+ &quot; ok&quot;);            &#125;);        &#125;    &#125; catch (Exception e) &#123;        e.printStackTrace();    &#125; finally &#123;        threadPool.shutdown();    &#125;&#125;</code></pre><p>3）七大参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,  //核心线程池大小</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize, //最大的线程池大小</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,  //超时了没有人调用就会释放</span></span><br><span class="line"><span class="params">                          TimeUnit unit, //超时单位</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue, //阻塞队列</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory, //线程工厂 创建线程的 一般不用动</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler //拒绝策略</span></span><br><span class="line"><span class="params">                         )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>阿里巴巴的Java操作手册中明确说明：对于Integer.MAX_VALUE初始值较大，所以一般情况我们要使用底层的ThreadPoolExecutor来创建线程池。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PollDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取cpu 的核数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                max,</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                service.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            service.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）拒绝策略</p><ol><li>new ThreadPoolExecutor.AbortPolicy()： &#x2F;&#x2F;该拒绝策略为：银行满了，还有人进来，不处理这个人的，并抛出异常</li></ol><p>超出最大承载，就会抛出异常：队列容量大小+maxPoolSize</p><ol start="2"><li><p>new ThreadPoolExecutor.CallerRunsPolicy()： &#x2F;&#x2F;该拒绝策略为：哪来的去哪里 main线程进行处理</p></li><li><p>new ThreadPoolExecutor.DiscardPolicy(): &#x2F;&#x2F;该拒绝策略为：队列满了,丢掉异常，不会抛出异常。</p></li><li><p>new ThreadPoolExecutor.DiscardOldestPolicy()： &#x2F;&#x2F;该拒绝策略为：队列满了，尝试去和最早的进程竞争，不会抛出异常</p></li></ol><p>5）如何设置线程池的大小<br>1、CPU密集型：电脑的核数是几核就选择几；选择maximunPoolSize的大小</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取cpu 的核数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                max,</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>2、I&#x2F;O密集型：</p><p>在程序中有15个大型任务，io十分占用资源；I&#x2F;O密集型就是判断我们程序中十分耗I&#x2F;O的线程数量，大约是最大I&#x2F;O数的一倍到两倍之间。</p><h2 id="ForkJoin"><a href="#ForkJoin" class="headerlink" title="ForkJoin"></a>ForkJoin</h2><blockquote><p>什么是forkJoin</p></blockquote><p>并行执行任务，加快效率</p><p>大任务拆分为多个小任务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.moying.forkJoin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinPool;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ForkJoinTask;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RecursiveTask;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.LongStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long start ;</span><br><span class="line">    <span class="keyword">private</span> Long end;</span><br><span class="line">    <span class="comment">// 临界值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">100000000L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForkJoinDemo</span><span class="params">(Long start, Long end)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        test1();</span><br><span class="line"></span><br><span class="line">        test2();</span><br><span class="line"></span><br><span class="line">        test3();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;=<span class="number">10_0000_0000</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;test1耗费时间为：&quot;</span>+(end-start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(<span class="number">0L</span>, <span class="number">10_0000_0000L</span>);</span><br><span class="line">        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);<span class="comment">//   提交任务</span></span><br><span class="line"><span class="comment">//        forkJoinPool.execute(task); //  执行任务</span></span><br><span class="line">        System.out.println(submit.get());</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;test2耗费时间为：&quot;</span>+(end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">long</span> <span class="variable">reduce</span> <span class="operator">=</span> LongStream.rangeClosed(<span class="number">0L</span>, <span class="number">10_0000_0000L</span>).parallel().reduce(<span class="number">0</span>, Long::sum);</span><br><span class="line">        System.out.println(reduce);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;test3耗费时间为：&quot;</span>+(end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Long <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>((end-start)&gt;temp)&#123;</span><br><span class="line">            <span class="comment">// 分支合并计算</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">middle</span>  <span class="operator">=</span>(start+end)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">ForkJoinDemo</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(start, middle);</span><br><span class="line">            task1.fork();<span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">            <span class="type">ForkJoinDemo</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(middle+<span class="number">1</span>, end);</span><br><span class="line">            task2.fork();<span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">            <span class="keyword">return</span> task1.join()+task2.join();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Long</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h3><blockquote><p> Future</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">batchAddQuestionBankQuestion</span><span class="params">(Long questionBankId, List&lt;Long&gt; questionIdList, User loginUser)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        ThrowUtils.throwIf(CollUtil.isEmpty(questionIdList), ErrorCode.PARAMS_ERROR, <span class="string">&quot;题目列表为空&quot;</span>);</span><br><span class="line">        ThrowUtils.throwIf(questionBankId == <span class="literal">null</span> || questionBankId &lt;= <span class="number">0</span>, ErrorCode.PARAMS_ERROR, <span class="string">&quot;题库非法&quot;</span>);</span><br><span class="line">        ThrowUtils.throwIf(loginUser == <span class="literal">null</span>, ErrorCode.NOT_LOGIN_ERROR);</span><br><span class="line">        <span class="comment">// 检查题目 id 是否存在</span></span><br><span class="line">        LambdaQueryWrapper&lt;Question&gt; questionLambdaQueryWrapper = Wrappers.lambdaQuery(Question.class)</span><br><span class="line">                .select(Question::getId)</span><br><span class="line">                .in(Question::getId, questionIdList);</span><br><span class="line"><span class="comment">//        List&lt;Question&gt; questionList = questionService.list(questionLambdaQueryWrapper);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合法的题目 id</span></span><br><span class="line"><span class="comment">//        List&lt;Long&gt; validQuestionIdList = questionList.stream()</span></span><br><span class="line"><span class="comment">//                .map(Question::getId)</span></span><br><span class="line"><span class="comment">//                .collect(Collectors.toList());</span></span><br><span class="line">        <span class="comment">// 合法的题目 id</span></span><br><span class="line">        List&lt;Long&gt; validQuestionIdList = questionService.listObjs(questionLambdaQueryWrapper, obj -&gt; (Long) obj);</span><br><span class="line">        ThrowUtils.throwIf(CollUtil.isEmpty(validQuestionIdList), ErrorCode.PARAMS_ERROR, <span class="string">&quot;合法的题目列表为空&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ThrowUtils.throwIf(CollUtil.isEmpty(validQuestionIdList), ErrorCode.PARAMS_ERROR, <span class="string">&quot;合法的题目列表为空&quot;</span>);</span><br><span class="line">        <span class="comment">// 检查题库 id 是否存在</span></span><br><span class="line">        <span class="type">QuestionBank</span> <span class="variable">questionBank</span> <span class="operator">=</span> questionBankService.getById(questionBankId);</span><br><span class="line">        ThrowUtils.throwIf(questionBank == <span class="literal">null</span>, ErrorCode.NOT_FOUND_ERROR, <span class="string">&quot;题库不存在&quot;</span>);</span><br><span class="line">        <span class="comment">// 检查哪些题目还不存在于题库中，避免重复插入</span></span><br><span class="line">        LambdaQueryWrapper&lt;QuestionBankQuestion&gt; lambdaQueryWrapper = Wrappers.lambdaQuery(QuestionBankQuestion.class)</span><br><span class="line">                .eq(QuestionBankQuestion::getQuestionBankId, questionBankId)</span><br><span class="line">                .in(QuestionBankQuestion::getQuestionId, validQuestionIdList);</span><br><span class="line">        List&lt;QuestionBankQuestion&gt; existQuestionList = <span class="built_in">this</span>.list(lambdaQueryWrapper);</span><br><span class="line">        <span class="comment">// 已存在于题库中的题目 id</span></span><br><span class="line">        Set&lt;Long&gt; existQuestionIdSet = existQuestionList.stream()</span><br><span class="line">                .map(QuestionBankQuestion::getId)</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">        <span class="comment">// 已存在于题库中的题目 id，不需要再次添加</span></span><br><span class="line">        validQuestionIdList = validQuestionIdList.stream().filter(questionId -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> !existQuestionIdSet.contains(questionId);</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        ThrowUtils.throwIf(CollUtil.isEmpty(validQuestionIdList), ErrorCode.PARAMS_ERROR, <span class="string">&quot;所有题目都已存在于题库中&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义线程池</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">customExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">          <span class="number">20</span>, <span class="comment">// 核心线程数</span></span><br><span class="line">          <span class="number">50</span>, <span class="comment">// 最大线程数</span></span><br><span class="line">          <span class="number">60L</span>, <span class="comment">// 线程空闲时间</span></span><br><span class="line">          TimeUnit.SECONDS, <span class="comment">// 时间单位</span></span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">10000</span>), <span class="comment">// 任务队列</span></span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy() <span class="comment">// 拒绝策略</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用于保存所有批次的 CompletableFuture</span></span><br><span class="line">        List&lt;CompletableFuture&lt;Void&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分批处理避免长事务，假设每次处理 1000 条数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalQuestionListSize</span> <span class="operator">=</span> validQuestionIdList.size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;totalQuestionListSize ; i += batchSize) &#123;</span><br><span class="line">            <span class="comment">// 生成每批次的数据</span></span><br><span class="line">            List&lt;Long&gt; subList = validQuestionIdList.subList(i, Math.min(i + batchSize, totalQuestionListSize));</span><br><span class="line">            List&lt;QuestionBankQuestion&gt; questionBankQuestions = subList.stream().map(questionId -&gt; &#123;</span><br><span class="line">                <span class="type">QuestionBankQuestion</span> <span class="variable">questionBankQuestion</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QuestionBankQuestion</span>();</span><br><span class="line">                questionBankQuestion.setQuestionBankId(questionBankId);</span><br><span class="line">                questionBankQuestion.setQuestionId(questionId);</span><br><span class="line">                questionBankQuestion.setUserId(loginUser.getId());</span><br><span class="line">                <span class="keyword">return</span> questionBankQuestion;</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用事务处理每批数据</span></span><br><span class="line">            <span class="type">QuestionBankQuestionService</span> <span class="variable">questionBankQuestionService</span> <span class="operator">=</span> (QuestionBankQuestionServiceImpl) AopContext.currentProxy();</span><br><span class="line"><span class="comment">//            questionBankQuestionService.batchAddQuestionsToBankInner(questionBankQuestions);</span></span><br><span class="line">            <span class="comment">// 异步处理每批数据并添加到 futures 列表</span></span><br><span class="line">            CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                questionBankQuestionService.batchAddQuestionsToBankInner(questionBankQuestions);</span><br><span class="line">            &#125;, customExecutor).exceptionally(ex-&gt;&#123;</span><br><span class="line">                log.error(<span class="string">&quot;添加题目到题库时发生未知错误，错误信息: &#123;&#125;&quot;</span>, ex.getMessage());</span><br><span class="line"><span class="comment">//                throw new BusinessException(ErrorCode.OPERATION_ERROR, &quot;向题库添加题目失败&quot;);</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            futures.add(future);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待所有批次操作完成</span></span><br><span class="line">        CompletableFuture.allOf(futures.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">0</span>])).join();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        customExecutor.shutdown();</span><br><span class="line"><span class="comment">//        // 执行插入</span></span><br><span class="line"><span class="comment">//        for (Long questionId : validQuestionIdList) &#123;</span></span><br><span class="line"><span class="comment">//            QuestionBankQuestion questionBankQuestion = new QuestionBankQuestion();</span></span><br><span class="line"><span class="comment">//            questionBankQuestion.setQuestionBankId(questionBankId);</span></span><br><span class="line"><span class="comment">//            questionBankQuestion.setQuestionId(questionId);</span></span><br><span class="line"><span class="comment">//            questionBankQuestion.setUserId(loginUser.getId());</span></span><br><span class="line"><span class="comment">//            boolean result = this.save(questionBankQuestion);</span></span><br><span class="line"><span class="comment">//            if (!result) &#123;</span></span><br><span class="line"><span class="comment">//                throw new BusinessException(ErrorCode.OPERATION_ERROR, &quot;向题库添加题目失败&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><blockquote><p>Volatile 是java jvm 提供的轻量级的同步机制</p></blockquote><ol><li>保证可见性</li><li>不保证原子性</li><li>禁止指令重排</li></ol><blockquote><p>什么是JMM</p></blockquote><p>java内存模型，不存在的东西，是一个约定</p><ol><li>线程解锁前 必须把共享变量</li><li>线程加锁前</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/10/15/ComputerSciense/JVAV/"/>
      <url>/2024/10/15/ComputerSciense/JVAV/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2024/10/15/ComputerSciense/os/"/>
      <url>/2024/10/15/ComputerSciense/os/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2024/10/15/ComputerSciense/%E8%AE%A1%E7%BD%91/"/>
      <url>/2024/10/15/ComputerSciense/%E8%AE%A1%E7%BD%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2024/10/15/ComputerSciense/Redis/"/>
      <url>/2024/10/15/ComputerSciense/Redis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2024/10/15/ComputerSciense/Mysql/"/>
      <url>/2024/10/15/ComputerSciense/Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="1-执行一条select语句，期间发生了什么？"><a href="#1-执行一条select语句，期间发生了什么？" class="headerlink" title="1. 执行一条select语句，期间发生了什么？"></a>1. 执行一条select语句，期间发生了什么？</h2><ul><li><input disabled type="checkbox"> your answer</li></ul><blockquote></blockquote><h2 id="2-MySQL-一行记录是怎么存储的？"><a href="#2-MySQL-一行记录是怎么存储的？" class="headerlink" title="2. MySQL 一行记录是怎么存储的？"></a>2. MySQL 一行记录是怎么存储的？</h2><p>其他关联问题</p><ul><li>MySQL 的 NULL 值会占用空间吗？</li><li>MySQL 怎么知道 varchar(n) 实际占用数据的大小？</li><li>varchar(n) 中 n 最大取值为多少？</li><li>行溢出后，MySQL 是怎么处理的？</li></ul><h1 id="索引篇"><a href="#索引篇" class="headerlink" title="索引篇"></a>索引篇</h1><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/mysql/%E7%B4%A2%E5%BC%95/%E7%B4%A2%E5%BC%95%E6%8F%90%E7%BA%B2.png" alt="img"></p><ul><li>按「数据结构」分类：<strong>B+tree索引、Hash索引、Full-text索引</strong>。</li><li>按「物理存储」分类：<strong>聚簇索引（主键索引）、二级索引（辅助索引）</strong>。</li><li>按「字段特性」分类：<strong>主键索引、唯一索引、普通索引、前缀索引</strong>。</li><li>按「字段个数」分类：<strong>单列索引、联合索引</strong>。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 开摆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录：哈希表</title>
      <link href="/2024/07/18/%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%EF%BC%9A%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2024/07/18/%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%EF%BC%9A%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="代码随想录-哈希表篇"><a href="#代码随想录-哈希表篇" class="headerlink" title="代码随想录-哈希表篇"></a>代码随想录-哈希表篇</h1><p>在大学或者其他时候学习数据结构课程时。不难发现，算法发展都是由于对时间或者空间有较高的需求，从而一步步优化。在查询优化时，到二分法(  log(N)  )时，开始出现了瓶颈， 如何降到O(1)或者退而求其次追求O(2),O(3)呢？</p><p>在顺序查找和二分查找时，我们都是索引+关键字存储,那能不能直接使用关键字充当索引，那不就能直接O（1）了吗？</p><p>哈希表就是怎么个思想（个人这样想的）</p><p>要深入学习的话，可以考虑由这些方面入手：空间开辟大小、哈希函数（存储）、解决哈希冲突、底层原理等。</p><p>嘛，这里主要是入门一下，通过做题感受一下</p><h2 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h2><p><a href="https://leetcode.cn/problems/valid-anagram/">力扣题目链接(opens new window)</a></p><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例 1: 输入: s &#x3D; “anagram”, t &#x3D; “nagaram” 输出: true</p><p>示例 2: 输入: s &#x3D; “rat”, t &#x3D; “car” 输出: false</p><blockquote><p>这个题目给出的都是小写字母，所以在用go写的方法里面就更简单一些。额也因为Java写的不太好</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">           HashMap&lt;Character,Integer&gt;map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">               Character temp=s.charAt(i);</span><br><span class="line">               <span class="keyword">if</span>(!map.containsKey(temp))&#123;</span><br><span class="line">                   map.put(temp,<span class="number">1</span>);</span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                   map.put(temp, map.get(temp)+<span class="number">1</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t.length();i++) &#123;</span><br><span class="line">               Character temp=t.charAt(i);</span><br><span class="line">               <span class="keyword">if</span>(!map.containsKey(temp))&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                   map.put(temp, map.get(temp)-<span class="number">1</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">               <span class="keyword">if</span>(value!=<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAnagram</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s)!=<span class="built_in">len</span>(t)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    arrays :=[<span class="number">26</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _,val :=<span class="keyword">range</span> s &#123;</span><br><span class="line">        arrays[val-<span class="type">rune</span>(<span class="string">&#x27;a&#x27;</span>)]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _,val :=<span class="keyword">range</span> t &#123;</span><br><span class="line">        arrays[val-<span class="type">rune</span>(<span class="string">&#x27;a&#x27;</span>)]--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrays==[<span class="number">26</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="349-Intersection-of-Two-Arrays"><a href="#349-Intersection-of-Two-Arrays" class="headerlink" title="349. Intersection of Two Arrays"></a><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349. Intersection of Two Arrays</a></h2><p>Given two integer arrays <code>nums1</code> and <code>nums2</code>, return <em>an array of their</em> </p><p><em>intersection</em></p><p> Each element in the result must be <strong>unique</strong> and you may return the result in <strong>any order</strong>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line">Output: [2]</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line">Output: [9,4]</span><br><span class="line">Explanation: [4,9] is also accepted.</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">         <span class="keyword">if</span>(nums1.length==<span class="number">0</span>||nums1==<span class="literal">null</span>||nums2==<span class="literal">null</span>||nums2.length==<span class="number">0</span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">         &#125;</span><br><span class="line">        HashSet&lt;Integer&gt;set1=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt;set2=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">             set1.add(i);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;</span><br><span class="line">             <span class="keyword">if</span>(set1.contains(i))&#123;</span><br><span class="line">                 set2.add(i);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> set2.stream().mapToInt(x-&gt;x).toArray();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums1) == <span class="number">0</span> || nums1 == <span class="literal">nil</span> || <span class="built_in">len</span>(nums2) == <span class="number">0</span> || nums2 == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">set := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">res := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line"><span class="keyword">if</span> _,ok := set[v];!ok&#123;</span><br><span class="line">set[v] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := set[v]; ok &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, v)</span><br><span class="line"><span class="built_in">delete</span>(set, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="202-Happy-Number"><a href="#202-Happy-Number" class="headerlink" title="202. Happy Number"></a><a href="https://leetcode.cn/problems/happy-number/">202. Happy Number</a></h2><p>Write an algorithm to determine if a number <code>n</code> is happy.</p><p>A <strong>happy number</strong> is a number defined by the following process:</p><ul><li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li><li>Repeat the process until the number equals 1 (where it will stay), or it <strong>loops endlessly in a cycle</strong> which does not include 1.</li><li>Those numbers for which this process <strong>ends in 1</strong> are happy.</li></ul><p>Return <code>true</code> <em>if</em> <code>n</code> <em>is a happy number, and</em> <code>false</code> <em>if not</em>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 19</span><br><span class="line">Output: true</span><br><span class="line">Explanation:</span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">set := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">bool</span>)</span><br><span class="line"><span class="keyword">for</span> n!=<span class="number">1</span> &amp;&amp; !set[n] &#123;</span><br><span class="line">        n,set[n] =getSum(n),<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> n==<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n != <span class="number">0</span> &#123;</span><br><span class="line">sum+=(n%<span class="number">10</span>)*(n%<span class="number">10</span>)</span><br><span class="line">n=n/<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><a href="https://leetcode.cn/problems/two-sum/">1. Two Sum</a></h2><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p><p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the <em>same</em> element twice.</p><p>You can return the answer in any order.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,4], target = 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,3], target = 6</span><br><span class="line">Output: [0,1]</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">set := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line"><span class="keyword">for</span> index, val := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> preIndex, ok := set[target-val]; ok &#123;</span><br><span class="line">                <span class="comment">// 第一轮主要是去重，防止覆盖</span></span><br><span class="line"><span class="keyword">return</span> []<span class="type">int</span>&#123;preIndex, index&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 数组值为map的key，下标为map的值</span></span><br><span class="line">set[val] = index</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="454-4Sum-II"><a href="#454-4Sum-II" class="headerlink" title="454. 4Sum II"></a><a href="https://leetcode.cn/problems/4sum-ii/">454. 4Sum II</a></h2><p>Given four integer arrays <code>nums1</code>, <code>nums2</code>, <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>, return the number of tuples <code>(i, j, k, l)</code> such that:</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">The two tuples are:</span><br><span class="line">1. (0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0</span><br><span class="line">2. (1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fourSumCount</span><span class="params">(nums1 []<span class="type">int</span>, nums2 []<span class="type">int</span>, nums3 []<span class="type">int</span>, nums4 []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line">hashmap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line">n := <span class="built_in">len</span>(nums1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line"><span class="comment">// key放和，val放出现次数</span></span><br><span class="line">hashmap[nums1[i]+nums2[j]]++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">count += hashmap[<span class="number">0</span>-(nums3[i]+nums4[j])]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="383-Ransom-Note"><a href="#383-Ransom-Note" class="headerlink" title="383. Ransom Note"></a><a href="https://leetcode.cn/problems/ransom-note/">383. Ransom Note</a></h2><p>Given two strings <code>ransomNote</code> and <code>magazine</code>, return <code>true</code> <em>if</em> <code>ransomNote</code> <em>can be constructed by using the letters from</em> <code>magazine</code> <em>and</em> <code>false</code> <em>otherwise</em>.</p><p>Each letter in <code>magazine</code> can only be used once in <code>ransomNote</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canConstruct</span><span class="params">(ransomNote <span class="type">string</span>, magazine <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">strMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> magazine &#123;</span><br><span class="line">strMap[<span class="type">int</span>(magazine[i])]++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ransomNote &#123;</span><br><span class="line"><span class="keyword">if</span> strMap[<span class="type">int</span>(ransomNote[i])]==<span class="number">0</span>&#123;</span><br><span class="line">            </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">        strMap[<span class="type">int</span>(ransomNote[i])]--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录：链表</title>
      <link href="/2024/06/29/%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%EF%BC%9A%E9%93%BE%E8%A1%A8/"/>
      <url>/2024/06/29/%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%EF%BC%9A%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="代码随想录—链表"><a href="#代码随想录—链表" class="headerlink" title="代码随想录—链表"></a>代码随想录—链表</h1><p>嗨嗨，越是到了期末周，越是想开摆。复习什么的，60分万岁吧。有些东西真不感兴趣了。</p><hr><p>这次是来到了链表篇（毕竟链表和数组在数据结构中很是重要）</p><p>这里我基本都是使用的迭代法（递归法得慢慢修炼修炼再考虑了）</p><p><strong>（从大一c语言学习的时候，就觉得大多数情况下都能约定好使用的是虚拟头结点就好了）</strong></p><p>所以推荐使用链表时都使用一个虚拟头结点（力扣人好像喜欢叫哑结点）</p><p>偶尔的话可以使用哨兵结点，用于减少判断条件或者越界</p><p>先大概概括一下基本题型吧</p><ul><li>链表的建立以及增删查改<ul><li>虚拟头结点的使用，temp临时指针等</li><li>边界条件判断（什么时候使用current !&#x3D;null 什么时候使用current.Next !&#x3D;null)</li><li>拓展： 双向链表，循环链表（记得试试约瑟夫环这个经典问题）</li></ul></li><li>反转链表<ul><li>原地反转（注意使用指针保存下一个结点）</li><li>新建头结点然后使用头插</li></ul></li><li>删除链表倒数第N个结点<ul><li>直接暴力，第一次先算链表长度，第二次遍历删除该结点</li><li>使用前后指针，先让快指针走N步，然后慢指针开始出发。</li></ul></li><li>判断是否有环<ul><li>让你判断是否有环<ul><li>快慢指针</li><li>哈希表</li></ul></li><li>寻找环的入口<ul><li>快慢指针</li><li>哈希表</li></ul></li></ul></li></ul><h2 id="链表基础-创建以及增删查改"><a href="#链表基础-创建以及增删查改" class="headerlink" title="链表基础(创建以及增删查改)"></a>链表基础(创建以及增删查改)</h2><p>力扣相关题目（也可以看看数据结构相关书籍，那边基础功能更多更全）</p><h3 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a><a href="https://leetcode.cn/problems/design-linked-list/">设计链表</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ListNode head;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ListNode</span>&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode(<span class="type">int</span> val)&#123;</span><br><span class="line">            <span class="built_in">this</span>.val =val;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        size=<span class="number">0</span>;</span><br><span class="line">        head =<span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;=size|| index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode current=head;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=index)&#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">       addAtIndex(<span class="number">0</span>,val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">       addAtIndex(size,val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         index = Math.max(<span class="number">0</span>, index);</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        size++;</span><br><span class="line">        ListNode newNode=<span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        ListNode current=head;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;index)&#123;</span><br><span class="line">           i++;</span><br><span class="line">            current=current.next;</span><br><span class="line">       &#125;</span><br><span class="line">       newNode.next=current.next;</span><br><span class="line">       current.next=newNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;=size|| index&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        ListNode current= head;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;index)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            current=current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.next=current.next.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="type">int</span></span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyLinkedList <span class="keyword">struct</span> &#123;</span><br><span class="line">head *ListNode</span><br><span class="line">size <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span></span> MyLinkedList &#123;</span><br><span class="line"><span class="keyword">return</span> MyLinkedList&#123;&amp;ListNode&#123;&#125;, <span class="number">0</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *MyLinkedList)</span></span> Get(index <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= l.size&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">current := l.head</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;=index;i++&#123;</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> current.Val</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l*MyLinkedList)</span></span>AddAtHead(val <span class="type">int</span>)&#123;</span><br><span class="line">l.AddAtIndex(<span class="number">0</span>,val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l*MyLinkedList)</span></span>AddAtTail(val <span class="type">int</span>)&#123;</span><br><span class="line">l.AddAtIndex(l.size,val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l*MyLinkedList)</span></span>AddAtIndex(index, val <span class="type">int</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> index &gt; l.size&#123;</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line">index =max(index,<span class="number">0</span>)</span><br><span class="line"><span class="comment">//if index &lt; 0 &#123;</span></span><br><span class="line"><span class="comment">//index = 0</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">current :=l.head</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;index;i++&#123;</span><br><span class="line">current = current.Next</span><br><span class="line">&#125;</span><br><span class="line">l.size++</span><br><span class="line"> toAdd := &amp;ListNode&#123;val, current.Next&#125;</span><br><span class="line"><span class="comment">//toAdd.Next=current.Next</span></span><br><span class="line">current.Next=toAdd</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l*MyLinkedList)</span></span> DeleteAtIndex(index <span class="type">int</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> index &gt;=l.size || index &lt;<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">&#125;</span><br><span class="line">current :=l.head</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;index;i++&#123;</span><br><span class="line">current=current.Next</span><br><span class="line">&#125;</span><br><span class="line">l.size--</span><br><span class="line">current.Next=current.Next.Next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b &gt; a &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表的反转"><a href="#链表的反转" class="headerlink" title="链表的反转"></a>链表的反转</h2><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h4 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>||head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode last=reverseList(head.next);</span><br><span class="line">        head.next.next=head;</span><br><span class="line">        head.next=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>||head.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span>head.next;</span><br><span class="line"></span><br><span class="line">   head.next=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   ListNode q;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">       q=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line"></span><br><span class="line">       q.val=p.val;</span><br><span class="line"></span><br><span class="line">       q.next=head;</span><br><span class="line"></span><br><span class="line">       head=q;</span><br><span class="line"></span><br><span class="line">       p=p.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseList</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pre *ListNode</span><br><span class="line">    current := head</span><br><span class="line">    <span class="keyword">for</span> current !=<span class="literal">nil</span> &#123;</span><br><span class="line">        temp := current.Next</span><br><span class="line">        current.Next=pre</span><br><span class="line">        pre=current</span><br><span class="line">        current = temp</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pre</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除链表倒数第N个结点"><a href="#删除链表倒数第N个结点" class="headerlink" title="删除链表倒数第N个结点"></a>删除链表倒数第N个结点</h2><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> * <span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line"> *     Val <span class="type">int</span></span><br><span class="line"> *     Next *ListNode</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeNthFromEnd</span><span class="params">(head *ListNode, n <span class="type">int</span>)</span></span> *ListNode &#123;</span><br><span class="line">    demmyHead := &amp;ListNode&#123;<span class="number">0</span>,head&#125;</span><br><span class="line">    fast,slow := demmyHead,demmyHead</span><br><span class="line">    f :=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> f &lt; n &#123;</span><br><span class="line">        f++</span><br><span class="line">        fast=fast.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> fast.Next!=<span class="literal">nil</span> &#123;</span><br><span class="line">        fast=fast.Next</span><br><span class="line">        slow=slow.Next</span><br><span class="line">    &#125;</span><br><span class="line">    slow.Next=slow.Next.Next</span><br><span class="line">    <span class="keyword">return</span> demmyHead.Next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表有环判断环入口问题"><a href="#链表有环判断环入口问题" class="headerlink" title="链表有环判断环入口问题"></a>链表有环判断环入口问题</h2><h3 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h3><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回 <code>null</code>。</em></p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><h4 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a>快慢指针法</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">    Val <span class="type">int</span></span><br><span class="line">    Next *ListNode </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    fast,slow := head ,head</span><br><span class="line">    <span class="keyword">for</span> fast != <span class="literal">nil</span> &amp;&amp; fast.Next!=<span class="literal">nil</span> &amp;&amp; fast.Next.Next!=<span class="literal">nil</span>&#123;</span><br><span class="line">        fast = fast.Next.Next</span><br><span class="line">        slow = slow.Next</span><br><span class="line">        <span class="keyword">if</span> fast == slow &#123;</span><br><span class="line">            fast = head </span><br><span class="line">            <span class="keyword">for</span> fast != slow &#123;</span><br><span class="line">                    fast = fast.Next</span><br><span class="line">                    slow = slow.Next</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fast</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="哈希表法"><a href="#哈希表法" class="headerlink" title="哈希表法"></a>哈希表法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">current</span> <span class="operator">=</span>  head;</span><br><span class="line">        Set&lt;ListNode&gt;hashSet =<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span>(current!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashSet.contains(current))&#123;</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                hashSet.add(current);</span><br><span class="line">            &#125;</span><br><span class="line">            current=current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">detectCycle</span><span class="params">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class="line">    hashMap := <span class="keyword">map</span>[*ListNode]<span class="type">int</span>&#123;&#125;</span><br><span class="line">    current := head </span><br><span class="line">    <span class="keyword">for</span> current != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok :=hashMap[current]; ok &#123;</span><br><span class="line">            <span class="keyword">return</span> current</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            hashMap[current]=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        current = current.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="141-链表中环的检测"><a href="#141-链表中环的检测" class="headerlink" title="141.链表中环的检测"></a>141.链表中环的检测</h3><h3 id="21-两个有序链表的合并"><a href="#21-两个有序链表的合并" class="headerlink" title="21.两个有序链表的合并"></a>21.两个有序链表的合并</h3><h3 id="18-删除链表"><a href="#18-删除链表" class="headerlink" title="18.删除链表"></a>18.删除链表</h3><h3 id="876-求链表的中间结点"><a href="#876-求链表的中间结点" class="headerlink" title="876.求链表的中间结点"></a>876.求链表的中间结点</h3>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> java </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码随想录：数组篇</title>
      <link href="/2024/06/24/%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%EF%BC%9A%E6%95%B0%E7%BB%84/"/>
      <url>/2024/06/24/%E7%AE%97%E6%B3%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%EF%BC%9A%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="数组篇总结"><a href="#数组篇总结" class="headerlink" title="数组篇总结"></a>数组篇总结</h1><p>首先跟着代码随想录刷了一刷，大概接触到题型有二分法、移除元素&#x2F;排序、滑动窗口、模拟行为</p><ul><li><p>二分法</p><ul><li>确定好左右边界，以及mid的变化就好</li></ul></li><li><p>移除元素</p><ul><li>for循环暴力！</li><li>快慢指针： 快指针去探索找寻符合条件的宝藏，然后交给慢指针</li><li>使用堆栈或者队列</li></ul></li><li><p>排序</p><ul><li>首尾双指针</li></ul></li><li><p>滑动窗口</p><ul><li>双层for循环暴力！ 其实这种也是滑动窗口，只是完全是无脑滑动（以边界条件为条件）</li><li>双指针滑动，两个for循环（上面是n*n，这个是2n），且移动条件为场景需求条件（使用hashmap进行维护）</li></ul></li><li><p>模拟行为</p><ul><li>害。。听天由命，画图吧。</li></ul></li></ul><p>可能这里更多的是用go去实现吧，因为go语言我也是刚学，然后语法都不太稳固那种，更别说使用什么api了，所以感觉就是算法和go都拿。有思路但是go很卡壳的话就先用Java写一下然后查go的语法然后用go写</p><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p><p>你必须设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [], target = 0</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;&#x3D;&#x3D;本题目有着月份的跨越，所以java版本思路和go差别还是有的。Java是二分找到一次后左右依次扩张（顺序遍历），而go版本是继续使用二分去左右扩张</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(right&gt;<span class="number">0</span>&amp;&amp;nums[left]==nums[right]&amp;&amp;nums[left]==target)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left,right&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left+right)&gt;&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="type">int</span> l=mid;</span><br><span class="line">                <span class="type">int</span> r=mid;</span><br><span class="line">                <span class="keyword">while</span>(l&gt;=left&amp;&amp;nums[l]==target)&#123;</span><br><span class="line">                    l--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span>(r&lt;=right&amp;&amp;nums[r]==target)&#123;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;++l,--r&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid]) &#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRange</span><span class="params">(nums []<span class="type">int</span>, target <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line"></span><br><span class="line">     left := searchLeft(nums,target)</span><br><span class="line">     <span class="keyword">if</span> left==<span class="built_in">len</span>(nums)||nums[left]!=target &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="type">int</span>&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;</span><br><span class="line">     &#125;</span><br><span class="line">    right := searchRight(nums,target)</span><br><span class="line">    <span class="keyword">return</span> []<span class="type">int</span>&#123;left,right&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchLeft</span><span class="params">(nums[]<span class="type">int</span>,target <span class="type">int</span>)</span></span><span class="type">int</span> &#123;</span><br><span class="line">    left,right:=<span class="number">0</span>,<span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left&lt;=right&#123;</span><br><span class="line">        mid:=(left+right)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid]==target&#123;</span><br><span class="line">            right=mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[mid]&lt;target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[mid]&gt;target &#123;</span><br><span class="line">            right = mid <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> left</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchRight</span><span class="params">(nums[]<span class="type">int</span>,target <span class="type">int</span>)</span></span><span class="type">int</span>&#123;</span><br><span class="line">     left,right:=<span class="number">0</span>,<span class="built_in">len</span>(nums)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> left&lt;=right&#123;</span><br><span class="line">        mid:=(left+right)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid]==target&#123;</span><br><span class="line">            left=mid + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[mid]&gt;target &#123;</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> nums[mid]&lt;target &#123;</span><br><span class="line">            left = mid + <span class="number">1</span> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> right</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode.cn/problems/move-zeroes/">283. 移动零</a></h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong> ，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure><p><strong>提示</strong>:</p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">moveZeroes</span><span class="params">(nums []<span class="type">int</span>)</span></span>  &#123;</span><br><span class="line">    slow:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> fast:=<span class="number">0</span>;fast&lt;<span class="built_in">len</span>(nums);fast++&#123;</span><br><span class="line">        <span class="comment">// 由fast开路</span></span><br><span class="line">        <span class="keyword">if</span> nums[fast]!=<span class="number">0</span> &#123;</span><br><span class="line">            nums[slow],nums[fast] = nums[fast],nums[slow]</span><br><span class="line">            slow++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串</a></h3><p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 <code>true</code> 。<code>#</code> 代表退格字符。</p><p><strong>注意：</strong>如果对空文本输入退格字符，文本继续为空。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 &quot;ac&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：s 和 t 都会变成 &quot;&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a#c&quot;, t = &quot;b&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：s 会变成 &quot;c&quot;，但 t 仍然是 &quot;b&quot;。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 200</code></li><li><code>s</code> 和 <code>t</code> 只含有小写字母以及字符 <code>&#39;#&#39;</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> indexS=s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> indexT=t.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> skipS=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> skipT=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(indexS&gt;=<span class="number">0</span>||indexT&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(indexS&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(indexS)==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                    skipS++;</span><br><span class="line">                    indexS--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(skipS&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    skipS--;</span><br><span class="line">                    indexS--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(indexT&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(t.charAt(indexT)==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                    skipT++;</span><br><span class="line">                    indexT--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(skipT&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    skipT--;</span><br><span class="line">                    indexT--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(indexS&gt;=<span class="number">0</span>&amp;&amp;indexT&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(indexS)!=t.charAt(indexT))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(indexS&gt;=<span class="number">0</span>||indexT&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            indexS--;</span><br><span class="line">            indexT--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">backspaceCompare</span><span class="params">(s <span class="type">string</span>, t <span class="type">string</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    skipS,skipT := <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    i,j := <span class="built_in">len</span>(s)<span class="number">-1</span>,<span class="built_in">len</span>(t)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i&gt;=<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> s[i]==<span class="string">&#x27;#&#x27;</span>&#123;</span><br><span class="line">                skipS++</span><br><span class="line">                i--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> skipS&gt;<span class="number">0</span>&#123;</span><br><span class="line">                skipS--</span><br><span class="line">                i--</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> j&gt;= <span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> t[j]==<span class="string">&#x27;#&#x27;</span>&#123;</span><br><span class="line">                skipT++</span><br><span class="line">                j--</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> skipT &gt; <span class="number">0</span>&#123;</span><br><span class="line">                skipT--</span><br><span class="line">                j--</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> i&gt;=<span class="number">0</span> &amp;&amp; j &gt;=<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> s[i] != t[j] &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        i--</span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h3><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortedSquares</span><span class="params">(nums []<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">temp := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">left, right := <span class="number">0</span>, <span class="built_in">len</span>(temp)<span class="number">-1</span></span><br><span class="line">i := right</span><br><span class="line"><span class="keyword">for</span> left &lt;= right &#123;</span><br><span class="line"><span class="keyword">if</span> -nums[left] &gt; nums[right] &#123;</span><br><span class="line">temp[i] = nums[left] * nums[left]</span><br><span class="line">            left++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">temp[i] = nums[right] * nums[right]</span><br><span class="line">            right--</span><br><span class="line">&#125;</span><br><span class="line">i--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h3><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 </p><p><strong>子数组</strong></p><p><code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 109</code></li><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li></ul><p><strong>进阶：</strong></p><ul><li>如果你已经实现 <code>O(n)</code> 时间复杂度的解法, 请尝试设计一个 <code>O(n log(n))</code> 时间复杂度的解法。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minSubArrayLen</span><span class="params">(target <span class="type">int</span>, nums []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    n :=<span class="built_in">len</span>(nums)</span><br><span class="line">length := n+<span class="number">1</span></span><br><span class="line">left, right := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ; right &lt; n; right++ &#123;</span><br><span class="line">sum += nums[right]</span><br><span class="line"><span class="keyword">for</span> sum &gt;= target &#123;</span><br><span class="line">sum -= nums[left]</span><br><span class="line"><span class="keyword">if</span> length &gt; right-left + <span class="number">1</span> &#123;</span><br><span class="line">                length = right-left +<span class="number">1</span></span><br><span class="line">            &#125; </span><br><span class="line">left++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> length &gt; n&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮</a></h3><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 <code>fruits</code> 表示，其中 <code>fruits[i]</code> 是第 <code>i</code> 棵树上的水果 <strong>种类</strong> 。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><ul><li>你只有 <strong>两个</strong> 篮子，并且每个篮子只能装 <strong>单一类型</strong> 的水果。每个篮子能够装的水果总量没有限制。</li><li>你可以选择任意一棵树开始采摘，你必须从 <strong>每棵</strong> 树（包括开始采摘的树）上 <strong>恰好摘一个水果</strong> 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。</li><li>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。</li></ul><p>给你一个整数数组 <code>fruits</code> ，返回你可以收集的水果的 <strong>最大</strong> 数目。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [1,2,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘全部 3 棵树。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [0,1,2,2]</span><br><span class="line">输出：3</span><br><span class="line">解释：可以采摘 [1,2,2] 这三棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [1,2,3,2,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：可以采摘 [2,3,2,2] 这四棵树。</span><br><span class="line">如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：可以采摘 [1,2,1,1,2] 这五棵树。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= fruits.length &lt;= 105</code></li><li><code>0 &lt;= fruits[i] &lt; fruits.length</code></li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">totalFruit</span><span class="params">(fruits []<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">ans := <span class="number">0</span></span><br><span class="line">cnt := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>&#123;&#125;</span><br><span class="line">left := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> right, value := <span class="keyword">range</span> fruits &#123;</span><br><span class="line">cnt[value]++</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(cnt) &gt; <span class="number">2</span> &#123;</span><br><span class="line">d := fruits[left]</span><br><span class="line">left++</span><br><span class="line">cnt[d]--</span><br><span class="line"><span class="keyword">if</span> cnt[d] == <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">delete</span>(cnt, d)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, right-left+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="坑爹的模拟行为"><a href="#坑爹的模拟行为" class="headerlink" title="坑爹的模拟行为"></a>坑爹的模拟行为</h2><h3 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h3><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[][]matrix = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> bottom=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">1</span>,pow =n*n;</span><br><span class="line">        <span class="keyword">while</span>(ans&lt;=pow)&#123;</span><br><span class="line">            <span class="comment">// 顶</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=left;i&lt;=right;i++) matrix[top][i]=ans++;</span><br><span class="line">            top++;</span><br><span class="line">            <span class="comment">// 右</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=top;i&lt;=bottom;i++) matrix[i][right]=ans++;</span><br><span class="line">            right--;</span><br><span class="line">            <span class="comment">// 底</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=right;i&gt;=left;i--)matrix[bottom][i]=ans++;</span><br><span class="line">            bottom--;</span><br><span class="line">            <span class="comment">// 左</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=bottom;i&gt;=top;i--) matrix[i][left]=ans++;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateMatrix</span><span class="params">(n <span class="type">int</span>)</span></span> [][]<span class="type">int</span> &#123;</span><br><span class="line"></span><br><span class="line">loop := <span class="number">1</span>   </span><br><span class="line">offset := <span class="number">1</span> </span><br><span class="line">startX, startY := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">ans := <span class="number">1</span> </span><br><span class="line">arrays := <span class="built_in">make</span>([][]<span class="type">int</span>, n)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> arrays &#123;</span><br><span class="line">arrays[i] = <span class="built_in">make</span>([]<span class="type">int</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> loop &lt;= n/<span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">// 顶部</span></span><br><span class="line"><span class="keyword">for</span> ; startY &lt; n-offset; startY++ &#123;</span><br><span class="line">arrays[startX][startY] = ans</span><br><span class="line">ans++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右边</span></span><br><span class="line"><span class="keyword">for</span> ; startX &lt; n-offset; startX++ &#123;</span><br><span class="line">arrays[startX][startY] = ans</span><br><span class="line">ans++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 底部</span></span><br><span class="line"><span class="keyword">for</span> ; startY &gt;= offset; startY-- &#123;</span><br><span class="line">arrays[startX][startY] = ans</span><br><span class="line">ans++</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 左边</span></span><br><span class="line"><span class="keyword">for</span> ; startX &gt;= offset; startX-- &#123;</span><br><span class="line">arrays[startX][startY] = ans</span><br><span class="line">ans++</span><br><span class="line">&#125;</span><br><span class="line">startX++</span><br><span class="line">startY++</span><br><span class="line">loop++</span><br><span class="line">offset++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">arrays[startX][startY] = ans</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arrays</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a><a href="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵</a></h3><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">spiralOrder</span><span class="params">(matrix [][]<span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line"></span><br><span class="line">lenX := <span class="built_in">len</span>(matrix)</span><br><span class="line"><span class="keyword">if</span> lenX == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">lenY := <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> lenY == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">top, right, bottom, left := <span class="number">0</span>, lenY<span class="number">-1</span>, lenX<span class="number">-1</span>, <span class="number">0</span></span><br><span class="line">total := lenX * lenY</span><br><span class="line">arrays := <span class="built_in">make</span>([]<span class="type">int</span>, total)</span><br><span class="line">ans := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ans &lt; total &#123;</span><br><span class="line"><span class="comment">// 顶</span></span><br><span class="line"><span class="keyword">for</span> i := left; i &lt;= right &amp;&amp; ans &lt; total; i++ &#123;</span><br><span class="line">arrays[ans] = matrix[top][i]</span><br><span class="line">ans++</span><br><span class="line">&#125;</span><br><span class="line">top++</span><br><span class="line"><span class="comment">// 右</span></span><br><span class="line"><span class="keyword">for</span> i := top; i &lt;= bottom &amp;&amp; ans &lt; total; i++ &#123;</span><br><span class="line">arrays[ans] = matrix[i][right]</span><br><span class="line">ans++</span><br><span class="line">&#125;</span><br><span class="line">right--</span><br><span class="line"><span class="comment">// 底</span></span><br><span class="line"><span class="keyword">for</span> i := right; i &gt;= left &amp;&amp; ans &lt; total; i-- &#123;</span><br><span class="line">arrays[ans] = matrix[bottom][i]</span><br><span class="line">ans++</span><br><span class="line">&#125;</span><br><span class="line">bottom--</span><br><span class="line"><span class="keyword">for</span> i := bottom; i &gt;= top &amp;&amp; ans &lt; total; i-- &#123;</span><br><span class="line">arrays[ans] = matrix[i][left]</span><br><span class="line">ans++</span><br><span class="line">&#125;</span><br><span class="line">left++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arrays</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arrays := [][]<span class="type">int</span>&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">5</span>&#125;, &#123;<span class="number">9</span>&#125;&#125;</span><br><span class="line">order := spiralOrder(arrays)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> order &#123;</span><br><span class="line"><span class="built_in">print</span>(order[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> java </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库事务隔离等级</title>
      <link href="/2024/06/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%AD%89%E7%BA%A7/"/>
      <url>/2024/06/09/%E6%95%B0%E6%8D%AE%E5%BA%93/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%AD%89%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>持续更新以及完善中…………………</p><h1 id="数据库事务隔离"><a href="#数据库事务隔离" class="headerlink" title="数据库事务隔离"></a>数据库事务隔离</h1><p>首先，为什么要有事务隔离呢？</p><p>在单线程下，没什么大碍，但是我们想要提高效率，采用多线程并发时，便会出现一些问题。</p><p><strong>下面的问题一定要当作一个事务来看待！！！！</strong>不要觉得连续两次查询就是一次事务了，这里的两次查询是处于同一个事务，你可以当作两次查询一次是写在函数开头，一次是写在了函数末尾。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">task</span><span class="params">()</span>&#123;</span><br><span class="line">    selectBySql();</span><br><span class="line">    </span><br><span class="line">    .....干了其他事情，或者没干。</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    selectBySql();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>脏写</li></ul><p>A有100块，现在给自己又转了20（就变成120了），现在B给A转了20块（变成了140），但是A转给自己20的事务因为某些原因出错导致回滚，又变成了100块。导致B不管先一步提交（120）还是后一步提交（140），都不是120块。</p><ul><li>脏读</li></ul><p>A转给自己20块，B读取了A资产发现有120块，但是A又因为某些问题导致回滚，B再去读A的资产发现变成了100块</p><ul><li>不可重复读</li></ul><p><img src="play\Butterfly\source_posts\数据库\数据库四种隔离等级.assets\image-20240609160520923.png" alt="image-20240609160520923"></p><ul><li>幻读</li></ul><p>A查询比自己财产更多的用户，发现只有C用户。</p><p>这个时候B和D用户开了账户，并转了很多钱进去。</p><p>A再次查询比自己财产更多的用户，发现出现了C，B，D用户（这是上次读取时未出现过的啊）</p><h2 id="read-uncommit（读未提交）"><a href="#read-uncommit（读未提交）" class="headerlink" title="read uncommit（读未提交）"></a>read uncommit（读未提交）</h2><p>Oracle默认隔离规则。（效率高）</p><p>读数据不需要锁，写数据需要锁。</p><p>解决了脏写问题（写操作互斥）</p><p>但是出现脏读问题。</p><h2 id="read-commit（读已提交）"><a href="#read-commit（读已提交）" class="headerlink" title="read commit（读已提交）"></a>read commit（读已提交）</h2><p>MySQL默认隔离规则（效率较高）。</p><p>只有更新事务成功提交,才能查询到本次更新.</p><p>A转账给自己20(初始100块),必须提交成功,其他人查询A的资产时才能看到120块.</p><p>解决脏读问题.</p><h1 id="插播一条（MVCC）"><a href="#插播一条（MVCC）" class="headerlink" title="插播一条（MVCC）"></a>插播一条（MVCC）</h1><p>MVCC</p><blockquote><p>mutil version concurrent control</p></blockquote><p>多版本并发控制，同一时刻同一条记录在系统中可以存在多个版本</p><p>只有当写数据事务提交时，才能读到最新的数据。</p><p>通过Read View （一致性视图）。</p><p>害，东西太多太多了，本人现在的理解就是。</p><p>初始阶段，A的资产记录是version1.0。  A执行更新的事务（更新到version2.0），然后B去读A的资产，只要是A执行更新事务没有提交，只能读到version1.0的数据。当A回滚时不会出现问题，当A提交后数据库中A资产数据更新到version2.0，但B需要提交本次查询事务，在下一次查询的时候才能看到version2.0的数据…</p><h2 id="REPEATABLE-READ（可重复读）"><a href="#REPEATABLE-READ（可重复读）" class="headerlink" title="REPEATABLE READ（可重复读）"></a><strong>REPEATABLE READ</strong>（可重复读）</h2><p>在整个事务过程中该事务看到的记录，自始至终都是一样的。</p><p>A转账给自己20(初始100块),必须提交成功</p><p>其他人查询A的资产时的事务也提交后,随后的查询事务才能读取到120块.</p><h2 id="serializable-（串行）"><a href="#serializable-（串行）" class="headerlink" title="serializable （串行）"></a><strong>serializable （串行）</strong></h2><p>解决所有问题。但是效率最低，无并发，读和写都需要上锁。</p><h1 id="画饼"><a href="#画饼" class="headerlink" title="画饼"></a>画饼</h1><hr><p>看到舍友们在复习数据库期末考试, 然后想到上学期学的时候对于事务以及并发这里学校并未怎么讲到.</p><p>然后学后端现在也开始进入到处理分布式,并发这些问题了.</p><p>先给自己挖一个数据库学习的坑吧.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2024/05/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/05/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2024/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2024/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="工厂模式-持续更新"><a href="#工厂模式-持续更新" class="headerlink" title="工厂模式(持续更新)"></a>工厂模式(持续更新)</h1><p>我们这里以手机销售作为应用场景，后续设计模式也尽量贴近生活（使用学校例子(●’◡’●)）</p><p>(感觉这里有点设计问题，写到后面感觉人麻了，自己理解不深以及应用场景想的不太好)</p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="初代设计"><a href="#初代设计" class="headerlink" title="初代设计"></a>初代设计</h3><p>首先设计一个手机商店</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factoryMod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneStore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">sellPhone</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        Phone phone;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xiaomi&quot;</span> -&gt; phone = <span class="keyword">new</span> <span class="title class_">xiaomiPhone</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;oppo&quot;</span> -&gt; phone = <span class="keyword">new</span> <span class="title class_">oppoPhone</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;huawei&quot;</span> -&gt; phone = <span class="keyword">new</span> <span class="title class_">huaweiPhone</span>();</span><br><span class="line">            <span class="keyword">default</span> -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有该手机&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        phone.prepare();</span><br><span class="line">        phone.okSell();</span><br><span class="line">        phone.pack();</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后设计一个手机抽象类，让不同品牌的手机继承该类(<strong>后续会讨论为什么要在手机这里设置这些方法而不是在商店里面</strong>，明明商店才是卖手机的啊）（当然了，个人想法，只是想法罢了）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;准备%s手机的盒子、充电线等\n&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">okSell</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;完成付款&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pack</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s被你打包带走\n&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后具体的品牌的手机继承该类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xiaomiPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">xiaomiPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;小米&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">oppoPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">oppoPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;OPPO&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">huaweiPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">huaweiPhone</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;华为&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写完之后不难发现，要是有新品牌手机出现或者说现有品牌手机不再供应，本该是增删对应品牌的手机就行，但是手机店的销售函数也要进行更改，显然是不合理的。</p><h3 id="简单工厂使用"><a href="#简单工厂使用" class="headerlink" title="简单工厂使用"></a>简单工厂使用</h3><p>设计一个工厂，跟生活一样，手机有生产的工厂，而不是交给手机店判断种类以及生产，它职责只是负责拿到货然后售卖。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xiaomi&quot;</span> -&gt; phone = <span class="keyword">new</span> <span class="title class_">xiaomiPhone</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;oppo&quot;</span> -&gt; phone = <span class="keyword">new</span> <span class="title class_">oppoPhone</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;huawei&quot;</span> -&gt; phone = <span class="keyword">new</span> <span class="title class_">huaweiPhone</span>();</span><br><span class="line">            <span class="keyword">default</span> -&gt; </span><br><span class="line">                System.out.println(<span class="string">&quot;没有该手机&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相应的手机店</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">sellPhone</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneFactory</span>().createPhone(type);</span><br><span class="line">        phone.talkPrice();</span><br><span class="line">        phone.okSell();</span><br><span class="line">        phone.pack();</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line">或者提前与某家工厂合作</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PhoneFactory phoneFactory;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PhoneStore</span><span class="params">(PhoneFactory phoneFactory)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.phoneFactory=phoneFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">sellPhone</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PhoneFactory</span>().createPhone(type);</span><br><span class="line">        phone.talkPrice();</span><br><span class="line">        phone.okSell();</span><br><span class="line">        phone.pack();</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样的话，能够将职责进行转移。比较手机的创建过程与手机店无关。（单一责任原则）</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>使用简单工厂确实将创建手机的过程转移到了工厂，让商店只负责卖手机就行，但是还是有问题，当我们添加新品牌手机时，还是会改动手机工厂中的case语句，还是违背了封闭-开放原则（不改动，支持扩展）</p><p>因此将采用工厂方法模式。</p><p><strong>定义：</strong>定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法模式把类实例化的过程推迟到子类。</p><p><img src="play\Butterfly\source_posts\设计模式\工厂模式\image-20241119211009996.png" alt="image-20241119211009996"></p><p>首先设计一个手机工厂的接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后其他手机实现这个接口(基本一致，只展示xiaomi工厂)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaomiFactory</span> <span class="keyword">implements</span> <span class="title class_">PhoneFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">xiaomiPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样的话，加入新的或者删除不同品牌的手机就不会去改动case判断语句了。</p><p>通过手机店去选择卖什么手机然后进行相应的实例化即可。但是代价就是加入新的品牌时，不仅要添加一个实体类，还要写对应的实体从创建工厂。相当于一次性要写两个类了。并且判断转移成了，商店得知道是哪个工厂创建的这个手机。</p><p>手机店的代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneStore</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">sellPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        PhoneFactory phoneFactory=<span class="keyword">new</span> <span class="title class_">HuaweiFactory</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> phoneFactory.createPhone();</span><br><span class="line">        phone.prepare();</span><br><span class="line">        phone.okSell();</span><br><span class="line">        phone.pack();</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><strong>定义：</strong>提供一个接口，用于创建相关的或依赖对象的家族，而不需要明确指定具体类。</p><p>我们刚刚的手机店生意很好，所以打算搞连锁店，在北上广深都搞分店然后突击海外市场（doge）</p><p><strong>这里也可以采用具体的手机品牌，然后就有了国内手机工厂的接口和国外手机工厂的接口</strong>，再去创建具体的品牌，但是这里只是讲解模式并不涉及太复杂的场景。</p><p><img src="play\Butterfly\source_posts\设计模式\工厂模式\image-20241119211018834.png" alt="image-20241119211018834"></p><p>所以首先定义一个商店的工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> Ipad <span class="title function_">createIpad</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后商店进行实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CNFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Phone <span class="title function_">createPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CNPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Ipad <span class="title function_">createIpad</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CNIpad</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后是平板和手机的接口,让具体的手机进行实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Ipad</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">okSell</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CNIpad</span> <span class="keyword">implements</span> <span class="title class_">Ipad</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">okSell</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pack</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后当我们使用国内或者国外的产品时，只需要更改实例化对象即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Factory factory=new CNFactory();   将CNFactory换成ForeignFactory即可</span></span><br><span class="line"><span class="comment">//        Ipad ipad = factory.createIpad();</span></span><br><span class="line"><span class="comment">//        ipad.pack();</span></span><br><span class="line"></span><br><span class="line">        Factory factory=<span class="keyword">new</span> <span class="title class_">ForeignFactory</span>();</span><br><span class="line">        <span class="type">Ipad</span> <span class="variable">ipad</span> <span class="operator">=</span> factory.createIpad();</span><br><span class="line">        ipad.pack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是我们会发现，当我们添加一个电脑产品时，必须加入PC接口，CN-PC类，ForeignPC类，那是相当麻烦的。</p><p>并且这里的客户端必须得知道国内工厂和国外工厂的创建实例方法。</p><h3 id="使用反射优化抽象工厂-待更新"><a href="#使用反射优化抽象工厂-待更新" class="headerlink" title="使用反射优化抽象工厂(待更新)"></a>使用反射优化抽象工厂(待更新)</h3><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在码代码过程中，也会发现，其实我们平时要是对多态使用较多的话，其实已经是在使用工厂模式了，只是没有将它抽象成一个词汇而已。并且选择模式时需要根据实际情况去选择相性较好的模式，不然会出现设计过度反倒更加复杂的情况，导致得不偿失。</p><p>不要有把新锤子就看什么都是钉子（但是还是得慢慢捶过才知道哪些该捶啊）还是得不断挨打才能成长。</p><p>在简单的场景使用简单工厂甚至于使用面向过程编程会更加简单快捷，所以希望能够慢慢磨练成长吧，从不知道设计模式，到知道并且使用，到使用但是没有刻意去想的境界。</p><p>所以啦，不要刻意去记下什么场景用什么模式，而是清楚这个模式能够解决什么问题，这样还能多个模式相结合。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式，Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch学习</title>
      <link href="/2024/05/01/ElasticSearch/"/>
      <url>/2024/05/01/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<h4 id="ElasticSearch的作用"><a href="#ElasticSearch的作用" class="headerlink" title="ElasticSearch的作用"></a>ElasticSearch的作用</h4><ul><li><p><code>ElasticSearch</code>是一款非常强大的开源搜素引擎，具备非常强大的功能，可以帮助我们从海量数据中快速找到需要的内容</p></li><li><p>例如在电商平台搜索商品，搜索<code>4090显卡</code>会以红色标识<br><a href="https://s1.ax1x.com/2022/12/24/zvVHPA.png"><img src="https://s1.ax1x.com/2022/12/24/zvVHPA.png" alt="zvVHPA.png"></a></p></li><li><p>在搜索引擎搜索答案，搜索到的内容同样会以红色标识，也可以实现搜索时的自动补全功能<br><a href="https://s1.ax1x.com/2022/12/24/zvVLxP.png"><img src="https://s1.ax1x.com/2022/12/24/zvVLxP.png" alt="zvVLxP.png"></a></p></li></ul><h4 id="ELK技术栈"><a href="#ELK技术栈" class="headerlink" title="ELK技术栈"></a>ELK技术栈</h4><ul><li><code>ElasticSearch</code>结合<code>kibana</code>、<code>Logstash</code>、<code>Beats</code>，也就是<code>elastic stack</code>(ELK)。被广泛应用在日志数据分析、实时监控等领域<br><a href="https://s1.ax1x.com/2022/12/24/zvZoLT.png"><img src="https://s1.ax1x.com/2022/12/24/zvZoLT.png" alt="img"></a></li><li>而<code>ElasticSearch</code>是<code>elastic stack</code>的核心，负责存储、搜索、分析数据<br><a href="https://s1.ax1x.com/2022/12/24/zvZfWn.png"><img src="https://s1.ax1x.com/2022/12/24/zvZfWn.png" alt="img"></a></li></ul><h4 id="ElasticSearch和Lucene"><a href="#ElasticSearch和Lucene" class="headerlink" title="ElasticSearch和Lucene"></a>ElasticSearch和Lucene</h4><ul><li>ElasticSearch底层是基于Lucene来实现的</li><li>Lucene是一个Java语言的搜索引擎类库，是Apache公司的顶级项目，由DougCutting于1999年研发，官网地址：<a href="https://lucene.apache.org/">https://lucene.apache.org/</a></li><li>Lucene的优势<ul><li>易扩展</li><li>高性能（基于倒排索引）</li></ul></li><li>Lucene的缺点<ul><li>只限于Java语言开发</li><li>学习曲线陡峭</li><li>不支持水平扩展</li></ul></li><li>ElasticSearch的发展史<ul><li>2004年，Shay Banon基于Lucene开发了Compass</li><li>2010年，Shay Banon重写了Compass，取名为ElasticSearch，官网地址：<a href="https://www.elastic.co/cnl/">https://www.elastic.co/cnl/</a></li></ul></li><li>相比于Lucene，ElasticSearch具备以下优势<ul><li>支持分布式，可水平扩展</li><li>提供Restful接口，可以被任意语言调用</li></ul></li></ul><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><ul><li>倒排索引的概念是基于MySQL这样的正向索引而言的</li></ul><h4 id="正向索引"><a href="#正向索引" class="headerlink" title="正向索引"></a>正向索引</h4><ul><li>为了搞明白什么是倒排索引，我们先来看看什么是正向索引，例如给下表中的id创建索引</li></ul><table><thead><tr><th align="center">id</th><th align="center">title</th><th align="center">price</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">小米手机</td><td align="center">3499</td></tr><tr><td align="center">2</td><td align="center">华为手机</td><td align="center">4999</td></tr><tr><td align="center">3</td><td align="center">华为小米充电器</td><td align="center">49</td></tr><tr><td align="center">4</td><td align="center">小米手环</td><td align="center">49</td></tr></tbody></table><ul><li>如果是基于id查询，那么直接走索引，查询速度非常快。</li><li>但是实际应用里，用户并不知道每一个商品的id，他们只知道title(商品名称)，所以对于用户的查询方式，是基于title(商品名称)做模糊查询，只能是逐行扫描数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL</span><br><span class="line">select id, title, price from tb_goods where title like %手机%</span><br></pre></td></tr></table></figure><ul><li>具体流程如下<ol><li>用户搜索数据，搜索框输入手机，那么条件就是title符合<code>%手机%</code></li><li>逐行获取数据</li><li>判断数据中的title是否符合用户搜索条件</li><li>如果符合，则放入结果集，不符合则丢弃</li></ol></li><li>逐行扫描，也就是全表扫描，随着数据量的增加，其查询效率也会越来越低。当数据量达到百万时，这将是一场灾难</li></ul><h4 id="倒排索引-1"><a href="#倒排索引-1" class="headerlink" title="倒排索引"></a>倒排索引</h4><ul><li>倒排索引中有两个非常重要的概念<ol><li>文档(Document)：用来搜索的数据，其中的每一条数据就是一个文档。例如一个网页、一个商品信息</li><li>词条(Term)：对文档数据或用户搜索数据，利用某种算法分词，得到的具备含义的词语就是词条。例如：我最喜欢的FPS游戏是Apex，就可以分为我、我最喜欢、FPS游戏、最喜欢的FPS、Apex这样的几个词条</li></ol></li><li>创建倒排索引是对正向索引的一种特殊处理，流程如下<ul><li>将每一个文档的数据利用算法分词，得到一个个词条</li><li>创建表，每行数据包括词条、词条所在文档id、位置等信息</li><li>因为词条唯一性，可以给词条创建索引，例如hash表结构索引</li></ul></li></ul><h4 id="正向和倒排"><a href="#正向和倒排" class="headerlink" title="正向和倒排"></a>正向和倒排</h4><ul><li><p>那么为什么一个叫做正向索引，一个叫做倒排索引呢？</p><ul><li><code>正向索引</code>是最传统的，根据id索引的方式。但是根据词条查询是，必须先逐条获取每个文档，然后判断文档中是否包含所需要的词条，是<code>根据文档查找词条的过程</code></li><li>而<code>倒排索引</code>则相反，是先找到用户要搜索的词条，然后根据词条得到包含词条的文档id，然后根据文档id获取文档，是<code>根据词条查找文档的过程</code></li></ul></li><li><p>那么二者的优缺点各是什么呢？</p><ul><li><pre><code>正向索引<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - 优点：可以给多个字段创建索引，根据索引字段搜索、排序速度非常快</span><br><span class="line">  - 缺点：根据非索引字段，或者索引字段中的部分词条查找时，只能全表扫描</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">  倒排索引</span><br></pre></td></tr></table></figure>- 优点：根据词条搜索、模糊搜索时，速度非常快- 缺点：只能给词条创建索引，而不是字段，无法根据字段做排序</code></pre></li></ul></li></ul><h1 id="Elasticsearch核心概念"><a href="#Elasticsearch核心概念" class="headerlink" title="Elasticsearch核心概念"></a>Elasticsearch核心概念</h1><p><img src="Users\末影\Desktop\课件\images\image-20220905171430202.png" alt="image-20220905171430202"></p><p><strong>注意：Elasticsearch约定一个索引只能有一个类型type，并且类型名固定为(_doc)</strong></p><h4 id="MySQL与ElasticSearch"><a href="#MySQL与ElasticSearch" class="headerlink" title="MySQL与ElasticSearch"></a>MySQL与ElasticSearch</h4><ul><li>我们统一的把MySQL和ElasticSearch的概念做一下对比</li></ul><table><thead><tr><th align="center"><strong>MySQL</strong></th><th align="center"><strong>Elasticsearch</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">Table</td><td align="center">Index</td><td align="center">索引(index)，就是文档的集合，类似数据库的表(Table)</td></tr><tr><td align="center">Row</td><td align="center">Document</td><td align="center">文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td align="center">Column</td><td align="center">Field</td><td align="center">字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td align="center">Schema</td><td align="center">Mapping</td><td align="center">Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td align="center">SQL</td><td align="center">DSL</td><td align="center">DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><ul><li><p>二者各有自己擅长之处</p><ul><li><code>MySQL</code>：产长事务类型操作，可以保证数据的安全和一致性</li><li><code>ElasticSearch</code>：擅长海量数据的搜索、分析、计算</li></ul></li><li><p>因此在企业中，往往是这二者结合使用</p><ul><li><p>对安全性要求较高的写操作，使用MySQL实现</p></li><li><p>对查询性能个较高的搜索需求，使用ElasticSearch实现</p></li><li><p>二者再基于某种方式，实现数据的同步，保证一致性</p><p>(<a href="https://s1.ax1x.com/2022/12/24/zvQRBt.png">https://s1.ax1x.com/2022/12/24/zvQRBt.png</a>)</p></li></ul></li></ul><h4 id="MySQL与ElasticSearch-1"><a href="#MySQL与ElasticSearch-1" class="headerlink" title="MySQL与ElasticSearch"></a>MySQL与ElasticSearch</h4><ul><li>我们统一的把MySQL和ElasticSearch的概念做一下对比</li></ul><table><thead><tr><th align="center"><strong>MySQL</strong></th><th align="center"><strong>Elasticsearch</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">Table</td><td align="center">Index</td><td align="center">索引(index)，就是文档的集合，类似数据库的表(Table)</td></tr><tr><td align="center">Row</td><td align="center">Document</td><td align="center">文档（Document），就是一条条的数据，类似数据库中的行（Row），文档都是JSON格式</td></tr><tr><td align="center">Column</td><td align="center">Field</td><td align="center">字段（Field），就是JSON文档中的字段，类似数据库中的列（Column）</td></tr><tr><td align="center">Schema</td><td align="center">Mapping</td><td align="center">Mapping（映射）是索引中文档的约束，例如字段类型约束。类似数据库的表结构（Schema）</td></tr><tr><td align="center">SQL</td><td align="center">DSL</td><td align="center">DSL是elasticsearch提供的JSON风格的请求语句，用来操作elasticsearch，实现CRUD</td></tr></tbody></table><ul><li>二者各有自己擅长之处<ul><li><code>MySQL</code>：产长事务类型操作，可以保证数据的安全和一致性</li><li><code>ElasticSearch</code>：擅长海量数据的搜索、分析、计算</li></ul></li><li>因此在企业中，往往是这二者结合使用<ul><li>对安全性要求较高的写操作，使用MySQL实现</li><li>对查询性能个较高的搜索需求，使用ElasticSearch实现</li><li>二者再基于某种方式，实现数据的同步，保证一致性<br><a href="https://s1.ax1x.com/2022/12/24/zvQRBt.png">  </a></li></ul></li></ul><h3 id="Docker部署单点ES"><a href="#Docker部署单点ES" class="headerlink" title="Docker部署单点ES"></a>Docker部署单点ES</h3><ul><li>因为我们还需要部署Kibana（可视化）容器，因此需要让他们处于同一个网络，为了方便使用名字查询，所以不使用默认的匿名网络。（使用compose部署可以一键互联，不需要这个步骤，但是将来有可能不需要kbiana，只需要es，所以先这里手动部署单点es）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.17.9 </span><br><span class="line">//注意版本，此后安装kibana以及ik分词器等都需要版本一致</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name es \</span><br><span class="line">    -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">    -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">    --privileged \</span><br><span class="line">    --network es-net \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">elasticsearch:7.17.9</span><br></pre></td></tr></table></figure><ul><li>命令解释：<ul><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：配置JVM的堆内存大小，默认是1G，但是最好不要低于512M</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：单点部署</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：数据卷挂载，绑定es的数据目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：数据卷挂载，绑定es的插件目录</li><li><code>-privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code>：让ES加入到这个网络当中</li><li><code>-p 9200</code>：暴露的HTTP协议端口，供我们用户访问的</li></ul></li></ul><p>启动成功后打开<code>192.168.87.132:9200</code>（这里是我的虚拟机ip）</p><h3 id="部署kibana"><a href="#部署kibana" class="headerlink" title="部署kibana"></a>部署kibana</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.17.9</span><br></pre></td></tr></table></figure><p>运行docker命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">--net work=es-net \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">kibana:7.17.9</span><br></pre></td></tr></table></figure><ul><li>命令解释<ul><li><code>--network=es-net</code>：让kibana加入<code>es-net</code>这个网络，与ES在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200</code>：设置ES的地址，因为kibana和ES在同一个网络，因此可以直接用容器名访问ES</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul></li></ul><p>成功启动后，打开浏览器访问：<code>192.168.87.132:5601</code>，即可以看到结果</p><h3 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it elasticsearch /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线下载安装</span></span><br><span class="line">./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.9/elasticsearch-analysis-ik-7.17.9.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>IK分词器包含两种模式<ul><li><code>ik_smart</code>：最少切分</li><li><code>ik_max_word</code>：最细切分</li></ul></li></ul><p>随着互联网的发展，<code>造词运动</code>也愈发频繁。出现了许多新词汇，但是在原有的词汇表中并不存在，例如<code>白给</code>、<code>白嫖</code>等<br>所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能</p><ol><li>打开IK分词器的config目录</li><li>找到IKAnalyzer.cfg.xml文件，并添加如下内容</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在IKAnalyzer.cfg.xml同级目录下新建ext.dic和stopword.dic，并编辑内容</p><h2 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h2><ul><li>索引库就类似于数据库表，mapping映射就类似表的结构</li><li>我们要向es中存储数据，必须先创建<code>库</code>和<code>表</code></li></ul><h3 id="mapping映射属性"><a href="#mapping映射属性" class="headerlink" title="mapping映射属性"></a>mapping映射属性</h3><ul><li><p>mapping是对索引库中文档的约束，常见的mapping属性包括</p><ul><li><pre><code>type<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    ：字段数据类型，常见的简单类型有</span><br><span class="line"></span><br><span class="line">    1. 字符串：text(可分词文本)、keyword(精确值，例如：品牌、国家、ip地址；因为这些词，分词之后毫无意义)</span><br><span class="line">    2. 数值：long、integer、short、byte、double、float</span><br><span class="line">    3. 布尔：boolean</span><br><span class="line">    4. 日期：date</span><br><span class="line">    5. 对象：object</span><br><span class="line"></span><br><span class="line">  - `index`：是否创建索引，默认为true，默认情况下会对所有字段创建倒排索引，即每个字段都可以被搜索。但是某些字段是不存在搜索的意义的，例如邮箱，图片(存储的只是图片url)，搜索邮箱或图片url的片段，没有任何意义。因此我们在创建字段映射时，一定要判断一下这个字段是否参与搜索，如果不参与搜索，则将其设置为false</span><br><span class="line"></span><br><span class="line">  - `analyzer`：使用哪种分词器</span><br><span class="line"></span><br><span class="line">  - `properties`：该字段的子字段</span><br><span class="line"></span><br><span class="line">```json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;age&quot;: 32,</span><br><span class="line">    &quot;weight&quot;: 48,</span><br><span class="line">    &quot;isMarried&quot;: false,</span><br><span class="line">    &quot;info&quot;: &quot;次元游击兵--恶灵&quot;,</span><br><span class="line">    &quot;email&quot;: &quot;wraith@Apex.net&quot;,</span><br><span class="line">    &quot;score&quot;: [99.1, 99.5, 98.9],</span><br><span class="line">    &quot;name&quot;: &#123;</span><br><span class="line">        &quot;firstName&quot;: &quot;雷尼&quot;,</span><br><span class="line">        &quot;lastName&quot;: &quot;布莱希&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h4 id="创建索引库和映射"><a href="#创建索引库和映射" class="headerlink" title="创建索引库和映射"></a>创建索引库和映射</h4><ul><li>基本语法<ul><li>请求方式：<code>PUT</code></li><li>请求路径：<code>/&#123;索引库名&#125;</code>，可以自定义</li><li>请求参数：<code>mapping映射</code></li></ul></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;字段名1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text &quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;字段名3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;子字段1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;子字段2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /test001</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="查询索引库"><a href="#查询索引库" class="headerlink" title="查询索引库"></a>查询索引库</h4><ul><li>基本语法<ul><li>请求方式：<code>GET</code></li><li>请求路径：<code>/&#123;索引库名&#125;</code></li><li>请求参数：<code>无</code></li></ul></li><li>格式：</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">GET /test001</span><br></pre></td></tr></table></figure><h4 id="修改索引库"><a href="#修改索引库" class="headerlink" title="修改索引库"></a>修改索引库</h4><ul><li>基本语法<ul><li>请求方式：<code>PUT</code></li><li>请求路径：<code>/&#123;索引库名&#125;/_mapping</code></li><li>请求参数：<code>mapping映射</code></li></ul></li><li>格式：</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;新字段名&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>倒排索引结构虽然不复杂，但是一旦数据结构改变(比如改变了分词器)，就需要重新创建倒排索引，这简直是灾难。因此索引库<code>一旦创建，就无法修改mapping</code></li><li>虽然无法修改mapping中已有的字段，但是却允许添加新字段到mapping中，因为不会对倒排索引产生影响</li></ul><h4 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h4><ul><li>基本语法：<ul><li>请求方式：<code>DELETE</code></li><li>请求路径：<code>/&#123;索引库名&#125;</code></li><li>请求参数：无</li></ul></li><li>格式</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">DELETE /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h3 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h3><ul><li>语法</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>文档id<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段3&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;子属性1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;子属性2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值4&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">POST /test001/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;次元游记兵--恶灵&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wraith@Apex.net&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;雷尼&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;布莱希&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><ul><li>根据rest风格，新增是post，查询应该是get，而且一般查询都需要条件，这里我们把文档id带上</li><li>语法</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">GET /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>id<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line"></span><br><span class="line">GET /test001/_doc/1</span><br></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><ul><li>删除使用DELETE请求，同样，需要根据id进行删除</li><li>语法</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">DELETE /&#123;索引库名&#125;/_doc/&#123;id&#125;</span><br></pre></td></tr></table></figure><ul><li>示例：根据id删除数据, 若删除的文档不存在, 则result为not found</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">DELETE /test001/_doc/1</span><br></pre></td></tr></table></figure><h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a><strong>修改文档</strong></h3><ul><li>修改有两种方式<ol><li><strong>全量</strong>修改：直接覆盖原来的文档</li><li><strong>增量</strong>修改：修改文档中的部分字段</li></ol></li></ul><h4 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h4><ul><li>全量修改是覆盖原来的文档，其本质是<ul><li>根据指定的id删除文档</li><li>新增一个相同id的文档</li></ul></li></ul><p><strong>注意：如果根据id删除时，id不存在，第二步的新增也会执行，也就从修改变成了新增操作了</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_doc/<span class="punctuation">&#123;</span>文档id<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;字段1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;字段2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// ... 略</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="增量修改"><a href="#增量修改" class="headerlink" title="增量修改"></a>增量修改</h4><ul><li>增量修改只修改指定id匹配文档中的部分字段</li><li>语法</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line">POST /<span class="punctuation">&#123;</span>索引库名<span class="punctuation">&#125;</span>/_update/<span class="punctuation">&#123;</span>文档id<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;字段名&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新的值&quot;</span><span class="punctuation">,</span></span><br><span class="line">         ...</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>文档的操作有哪些？</p><ol><li>创建文档：POST &#x2F;{索引库名}&#x2F;_doc&#x2F;{id}</li><li>查询文档：GET &#x2F;{索引库名}&#x2F;_doc&#x2F;{id}</li><li>删除文档：DELETE &#x2F;{索引库名}&#x2F;_doc&#x2F;{id}</li><li>修改文档</li></ol><ul><li>全量修改：PUT &#x2F;{索引库名}&#x2F;_doc&#x2F;{id}</li><li>增量修改：POST &#x2F;{索引库名}&#x2F;_update&#x2F;{id}</li></ul></li></ul><h2 id="Springdata-JAVA"><a href="#Springdata-JAVA" class="headerlink" title="Springdata -&gt;JAVA"></a>Springdata -&gt;JAVA</h2><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>配置ES</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#application.properties</span></span><br><span class="line"><span class="string">spring.elasticsearch.rest.uris=http://localhost:9200</span></span><br></pre></td></tr></table></figure><ul><li>编写实体类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(indexName=&quot;product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@Field(analyzer=&quot;ik_smart&quot;,searchAnalyzer=&quot;ik_smart&quot;,type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">    <span class="meta">@Field(analyzer=&quot;ik_smart&quot;,searchAnalyzer=&quot;ik_smart&quot;,type = FieldType.Text)</span></span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line">    <span class="meta">@Field(type=FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的index对应Es中的索引。</p><h3 id="测试实践"><a href="#测试实践" class="headerlink" title="测试实践"></a>测试实践</h3><p>这些简单的curd看看就行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductRepository</span> <span class="keyword">extends</span> <span class="title class_">ElasticsearchRepository</span>&lt;Product,String&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IProductService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductRepository repository;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchRestTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        repository.save(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        repository.save(product);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        repository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">get</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> repository.findById(id).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        Iterable&lt;Product&gt; all = repository.findAll();</span><br><span class="line">        List&lt;Product&gt;list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        all.forEach(list::add);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="复杂查询以及高亮展示"><a href="#复杂查询以及高亮展示" class="headerlink" title="复杂查询以及高亮展示"></a>复杂查询以及高亮展示</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">searchByEs</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//定义query</span></span><br><span class="line">   <span class="comment">//定义query</span></span><br><span class="line">        MultiMatchQueryBuilder queryBuilder=QueryBuilders.multiMatchQuery(<span class="string">&quot;手机&quot;</span>,<span class="string">&quot;title&quot;</span>, <span class="string">&quot;intro&quot;</span>);</span><br><span class="line">        queryBuilder.minimumShouldMatch(String.valueOf(<span class="number">1</span>));</span><br><span class="line">        HighlightBuilder highlightBuilder=<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">        highlightBuilder.field(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        highlightBuilder.requireFieldMatch(<span class="literal">false</span>);</span><br><span class="line">        highlightBuilder.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">        highlightBuilder.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">        highlightBuilder.fragmentSize(<span class="number">699999</span>);<span class="comment">// 最大高亮分片数</span></span><br><span class="line">        highlightBuilder.numOfFragments(<span class="number">0</span>);<span class="comment">// 从第一个分片获取高亮片段</span></span><br><span class="line">        Pageable pageable=PageRequest.of(<span class="number">0</span>,<span class="number">10</span>);<span class="comment">//0为第一页，10为pageSize</span></span><br><span class="line">        NativeSearchQuery searchQuery=<span class="keyword">new</span> <span class="title class_">NativeSearchQueryBuilder</span>()</span><br><span class="line">                .withQuery(queryBuilder)</span><br><span class="line">                .withPageable(pageable)</span><br><span class="line">                .withHighlightBuilder(highlightBuilder)<span class="comment">// 设置高亮</span></span><br><span class="line">                .build();</span><br><span class="line">        SearchHits&lt;Product&gt; searchHits= template.search(searchQuery, Product.class);</span><br><span class="line">     List&lt;Product&gt;list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(searchHits.hasSearchHits())&#123;</span><br><span class="line">            List&lt;SearchHit&lt;Product&gt;&gt; searchHitList= searchHits.getSearchHits();</span><br><span class="line">            <span class="keyword">for</span> (SearchHit&lt;Product&gt; hit : searchHitList) &#123;</span><br><span class="line">                Product product=<span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">                product.setId(hit.getId());</span><br><span class="line">                 <span class="comment">// 处理高亮</span></span><br><span class="line">                <span class="keyword">if</span>(hit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> String.valueOf(hit.getHighlightFields().get(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">                    product.setTitle(title.substring(<span class="number">1</span>,title.length()-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">if</span>(hit.getHighlightFields().get(<span class="string">&quot;intro&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    String intro=String.valueOf(hit.getHighlightFields().get(<span class="string">&quot;intro&quot;</span>));</span><br><span class="line">                    product.setIntro(intro.substring(<span class="number">1</span>,intro.length()-<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(product);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 中间件 </tag>
            
            <tag> 后端 </tag>
            
            <tag> docker使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
