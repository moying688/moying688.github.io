<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker学习</title>
      <link href="/2024/04/20/Docker%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/04/20/Docker%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简单命令"><a href="#1-简单命令" class="headerlink" title="1.简单命令"></a>1.简单命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行docker ps命令，如果不报错，说明安装启动成功</span></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="1-1部署MySQL"><a href="#1-1部署MySQL" class="headerlink" title="1.1部署MySQL"></a>1.1部署MySQL</h4><p>首先，我们利用Docker来安装一个MySQL软件，大家可以对比一下之前传统的安装方式，看看哪个效率更高一些。</p><p>如果是利用传统方式部署MySQL，大概的步骤有：</p><ul><li>搜索并下载MySQL安装包</li><li>上传至Linux环境</li><li>编译和配置环境</li><li>安装</li></ul><p>而使用Docker安装，仅仅需要一步即可，在命令行输入下面的命令（建议采用CV大法）：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d</span> \</span><br><span class="line">  <span class="literal">--name</span> mysql \</span><br><span class="line">  <span class="literal">-p</span> <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">  <span class="literal">-e</span> TZ=Asia/Shanghai \</span><br><span class="line">  <span class="literal">-e</span> MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>在windows下测试连接，测试成功！</p><p>当我们执行命令后，Docker做的第一件事情，是去自动搜索并下载了MySQL，然后会自动运行MySQL，我们完全不用插手，非常方便。</p><p>而且，这种安装方式完全不用考虑运行的操作系统环境，它不仅仅在CentOS系统是这样，在Ubuntu系统、macOS系统、甚至是装了WSL的Windows下，都可以使用这条命令来安装MySQL。</p><p>要知道，<strong>不同操作系统下其安装包、运行环境是都不相同的</strong>！如果是<strong>手动安装，必须手动解决安装包不同、环境不同的、配置不同的问题</strong>！</p><p>而使用Docker，这些完全不用考虑。就是因为Docker会自动搜索并下载MySQL。注意：这里下载的不是安装包，而是<strong>镜像。</strong>镜像中不仅包含了MySQL本身，还包含了其运行所需要的环境、配置、系统级函数库。因此它在运行时就有自己独立的环境，就可以跨系统运行，也不需要手动再次配置环境了。这套独立运行的隔离环境我们称为<strong>容器</strong>。</p><p>说明：</p><ul><li>镜像：英文是<strong>image</strong></li><li>容器：英文是<strong>container</strong></li></ul><blockquote><p>因此，Docker安装软件的过程，就是自动搜索下载镜像，然后创建并运行容器的过程。</p></blockquote><p>Docker会根据命令中的镜像名称自动搜索并下载镜像，那么问题来了，它是去哪里搜索和下载镜像的呢？这些镜像又是谁制作的呢？</p><p>Docker官方提供了一个专门管理、存储镜像的网站，并对外开放了镜像上传、下载的权利。Docker官方提供了一些基础镜像，然后各大软件公司又在基础镜像基础上，制作了自家软件的镜像，全部都存放在这个网站。这个网站就成了Docker镜像交流的社区：</p><p><strong><a href="https://hub.docker.com/">https://hub.docker.com/</a></strong></p><p>基本上我们常用的各种软件都能在这个网站上找到，我们甚至可以自己制作镜像上传上去。</p><p>像这种提供存储、管理Docker镜像的服务器，被称为DockerRegistry，可以翻译为镜像仓库。DockerHub网站是官方仓库，阿里云、华为云会提供一些第三方仓库，我们也可以自己搭建私有的镜像仓库。</p><p>官方仓库在国外，下载速度较慢，一般我们都会使用第三方仓库提供的镜像加速功能，提高下载速度。而企业内部的机密项目，往往会采用私有镜像仓库。</p><p>总之，镜像的来源有两种：</p><ul><li>基于官方基础镜像自己制作</li><li>直接去DockerRegistry下载</li></ul><blockquote><p><strong>总结一下：</strong></p><p><strong>Docker本身包含一个后台服务，我们可以利用Docker命令告诉Docker服务，帮助我们快速部署指定的应用。Docker服务部署应用时，首先要去搜索并下载应用对应的镜像，然后根据镜像创建并允许容器，应用就部署完成了。</strong></p></blockquote><p>用一幅图标示如下：</p><p><img src="C:\Users\末影\Downloads\whiteboard_exported_image.png" alt="whiteboard_exported_image"></p><h4 id="1-2命令解读"><a href="#1-2命令解读" class="headerlink" title="1.2命令解读"></a>1.2命令解读</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \ </span><br><span class="line">  --name mysql \   取名,唯一</span><br><span class="line">  -p 3306:3306 \   端口映射, (后面是容器端口,前面是宿主机端口)</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p><strong>解读：</strong></p><ul><li><code>docker run -d</code> ：创建并运行一个容器，<code>-d</code>则是让容器以后台进程运行</li><li><code>--name mysql </code> : 给容器起个名字叫<code>mysql</code>，你可以叫别的</li><li><code>-p 3306:3306</code> : 设置端口映射。<ul><li><strong>容器是隔离环境</strong>，外界不可访问。但是可以<strong>将宿主机端口映射容器内到端口</strong>，当访问宿主机指定端口时，就是在访问容器内的端口了。</li><li>容器内端口往往是由容器内的进程决定，例如MySQL进程默认端口是3306，因此容器内端口一定是3306；而宿主机端口则可以任意指定，一般与容器内保持一致。</li><li>格式： <code>-p 宿主机端口:容器内端口</code>，示例中就是将宿主机的3306映射到容器内的3306端口</li></ul></li><li><code>-e TZ=Asia/Shanghai</code> : 配置容器内进程运行时的一些参数<ul><li>格式：<code>-e KEY=VALUE</code>，KEY和VALUE都由容器内进程决定</li><li>案例中，<code>TZ=Asia/Shanghai</code>是设置时区；<code>MYSQL_ROOT_PASSWORD=123</code>是设置MySQL默认密码</li></ul></li><li><code>mysql</code> : 设置<strong>镜像</strong>名称，Docker会根据这个名字搜索并下载镜像<ul><li>格式：<code>REPOSITORY:TAG</code>，例如<code>mysql:8.0</code>，其中<code>REPOSITORY</code>可以理解为镜像名，<code>TAG</code>是版本号</li><li>在未指定<code>TAG</code>的情况下，默认是最新版本，也就是<code>mysql:latest</code></li></ul></li></ul><h2 id="2-Docker基础"><a href="#2-Docker基础" class="headerlink" title="2.Docker基础"></a>2.Docker基础</h2><p>Docker官方文档：<strong><a href="https://docs.docker.com/">https://docs.docker.com/</a></strong></p><h3 id="2-1-场景命令"><a href="#2-1-场景命令" class="headerlink" title="2.1 场景命令"></a>2.1 场景命令</h3><p><a href="https://docs.docker.com/engine/reference/commandline/cli/">Use the Docker command line | Docker Docs</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run 创建并运行</span><br><span class="line"></span><br><span class="line">docker stop 停止</span><br><span class="line"></span><br><span class="line">docker start 启动</span><br><span class="line"></span><br><span class="line">docker ps 查看容器运行情况</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">rm</span> 删除容器      docker rmi 删除镜像</span><br><span class="line">docker images 查看镜像</span><br></pre></td></tr></table></figure><h4 id="2-1-1-命令介绍"><a href="#2-1-1-命令介绍" class="headerlink" title="2.1.1.命令介绍"></a>2.1.1.命令介绍</h4><p>其中，比较常见的命令有：</p><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker pull</td><td align="left">拉取镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/pull/">docker pull</a></td></tr><tr><td align="left">docker push</td><td align="left">推送镜像到DockerRegistry</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/push/">docker push</a></td></tr><tr><td align="left">docker images</td><td align="left">查看本地镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/images/">docker images</a></td></tr><tr><td align="left">docker rmi</td><td align="left">删除本地镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/rmi/">docker rmi</a></td></tr><tr><td align="left">docker run</td><td align="left">创建并运行容器（不能重复创建）</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a></td></tr><tr><td align="left">docker stop</td><td align="left">停止指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/stop/">docker stop</a></td></tr><tr><td align="left">docker start</td><td align="left">启动指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/start/">docker start</a></td></tr><tr><td align="left">docker restart</td><td align="left">重新启动容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/restart/">docker restart</a></td></tr><tr><td align="left">docker rm</td><td align="left">删除指定容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/rm/">docs.docker.com</a></td></tr><tr><td align="left">docker ps</td><td align="left">查看容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/ps/">docker ps</a></td></tr><tr><td align="left">docker logs</td><td align="left">查看容器运行日志</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/logs/">docker logs</a></td></tr><tr><td align="left">docker exec</td><td align="left">进入容器</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/exec/">docker exec</a></td></tr><tr><td align="left">docker save</td><td align="left">保存镜像到本地压缩文件</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/save/">docker save</a></td></tr><tr><td align="left">docker load</td><td align="left">加载本地压缩文件到镜像</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/load/">docker load</a></td></tr><tr><td align="left">docker inspect</td><td align="left">查看容器详细信息</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/inspect/">docker inspect</a></td></tr></tbody></table><p>用一副图来表示这些命令的关系：</p><p>![whiteboard_exported_image (1)](C:\Users\末影\Downloads\whiteboard_exported_image (1).png)</p><p>补充：</p><p>默认情况下，每次重启虚拟机我们都需要手动启动Docker和Docker中的容器。通过命令可以实现开机自启：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker开机自启</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker容器开机自启</span></span><br><span class="line">docker update <span class="literal">--restart</span>=always [容器名/容器<span class="type">id</span>]</span><br></pre></td></tr></table></figure><h4 id="2-1-2-演示"><a href="#2-1-2-演示" class="headerlink" title="2.1.2.演示"></a>2.1.2.演示</h4><p>教学环节说明：我们以Nginx为例给大家演示上述命令。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第1步，去DockerHub查看nginx镜像仓库及相关信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第2步，拉取Nginx镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第3步，查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 结果如下：</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    <span class="number">605</span>c77e624dd   <span class="number">16</span> months ago   <span class="number">141</span>MB</span><br><span class="line">mysql        latest    <span class="number">3218</span>b38490ce   <span class="number">17</span> months ago   <span class="number">516</span>MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第4步，创建并允许Nginx容器</span></span><br><span class="line">docker run <span class="literal">-d</span> <span class="literal">--name</span> nginx <span class="literal">-p</span> <span class="number">80</span>:<span class="number">80</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第5步，查看运行中容器</span></span><br><span class="line">docker <span class="built_in">ps</span></span><br><span class="line"><span class="comment"># 也可以加格式化方式访问，格式会更加清爽</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第6步，访问网页，地址：http://虚拟机地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第7步，停止容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第8步，查看所有容器</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第9步，再次启动nginx容器</span></span><br><span class="line">docker <span class="built_in">start</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第10步，再次查看容器</span></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">--format</span> <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第11步，查看容器详细信息</span></span><br><span class="line">docker inspect nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第12步，进入容器,查看容器内目录</span></span><br><span class="line">docker exec <span class="literal">-it</span> nginx bash</span><br><span class="line"><span class="comment"># 或者，可以进入MySQL</span></span><br><span class="line">docker exec <span class="literal">-it</span> mysql mysql <span class="literal">-uroot</span> <span class="literal">-p</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第13步，删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"><span class="comment"># 发现无法删除，因为容器运行中，强制删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> <span class="operator">-f</span> nginx</span><br></pre></td></tr></table></figure><h4 id="2-1-3-命令别名"><a href="#2-1-3-命令别名" class="headerlink" title="2.1.3.命令别名"></a>2.1.3.命令别名</h4><p>给常用Docker命令起别名，方便我们访问：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改/root/.bashrc文件</span></span><br><span class="line">vi /root/.bashrc</span><br><span class="line">内容如下：</span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line">alias <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line">alias <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line">alias <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line">alias dps=<span class="string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Status&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span></span><br><span class="line">alias dis=<span class="string">&#x27;docker images&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">f</span> /<span class="type">etc</span>/<span class="type">bashrc</span> ]; then</span><br><span class="line">        . /etc/bashrc</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>然后，执行命令使别名生效</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure><blockquote><p>也可以别名用来调戏一起学Linux的哥们(bushi)</p></blockquote><h3 id="2-2-数据卷"><a href="#2-2-数据卷" class="headerlink" title="2.2.数据卷"></a>2.2.数据卷</h3><p>容器是隔离环境，容器内程序的文件、配置、运行时产生的容器都在容器内部，我们要读写容器内的文件非常不方便。大家思考几个问题：</p><ul><li>如果要升级MySQL版本，需要销毁旧容器，那么数据岂不是跟着被销毁了？</li><li>MySQL、Nginx容器运行后，如果我要修改其中的某些配置该怎么办？</li><li>我想要让Nginx代理我的静态资源怎么办？</li></ul><p>因此，容器提供程序的运行环境，但是<strong>程序运行产生的数据、程序运行依赖的配置都应该与容器解耦</strong>。</p><h4 id="2-2-1-什么是数据卷"><a href="#2-2-1-什么是数据卷" class="headerlink" title="2.2.1.什么是数据卷"></a>2.2.1.什么是数据卷</h4><p><strong>数据卷（volume）</strong>是一个虚拟目录，是<strong>容器内目录</strong>与<strong>宿主机目录</strong>之间映射的桥梁。</p><p>以Nginx为例，我们知道Nginx中有两个关键的目录：</p><ul><li><code>html</code>：放置一些静态资源</li><li><code>conf</code>：放置配置文件</li></ul><p>如果我们要让Nginx代理我们的静态资源，最好是放到<code>html</code>目录；如果我们要修改Nginx的配置，最好是找到<code>conf</code>下的<code>nginx.conf</code>文件。</p><p>但遗憾的是，容器运行的Nginx所有的文件都在容器内部。所以我们必须利用数据卷将两个目录与宿主机目录关联，方便我们操作。如图：</p><p>![whiteboard_exported_image (2)](C:\Users\末影\Downloads\whiteboard_exported_image (2).png)</p><ul><li>我们创建了两个数据卷：<code>conf</code>、<code>html</code></li><li>Nginx容器内部的<code>conf</code>目录和<code>html</code>目录分别与两个数据卷关联。</li><li>而数据卷conf和html分别指向了宿主机的<code>/var/lib/docker/volumes/conf/_data</code>目录和<code>/var/lib/docker/volumes/html/_data</code>目录</li></ul><p>这样以来，容器内的<code>conf</code>和<code>html</code>目录就 与宿主机的<code>conf</code>和<code>html</code>目录关联起来，我们称为<strong>挂载</strong>。此时，我们操作宿主机的<code>/var/lib/docker/volumes/html/_data</code>就是在操作容器内的<code>/usr/share/nginx/html/_data</code>目录。只要我们将静态资源放入宿主机对应目录，就可以被Nginx代理了。</p><blockquote><p><code>/var/lib/docker/volumes</code>这个目录就是默认的存放所有容器数据卷的目录，其下再根据数据卷名称创建新目录，格式为<code>/数据卷名/_data</code>。</p></blockquote><blockquote><p><strong>为什么不让容器目录直接指向宿主机目录呢</strong>？</p><ul><li>因为直接指向宿主机目录就与宿主机强耦合了，如果切换了环境，宿主机目录就可能发生改变了。由于容器一旦创建，目录挂载就无法修改，这样容器就无法正常工作了。</li><li>但是容器指向数据卷，一个逻辑名称，而数据卷再指向宿主机目录，就不存在强耦合。如果宿主机目录发生改变，只要改变数据卷与宿主机目录之间的映射关系即可。</li></ul></blockquote><h4 id="2-2-2-数据卷命令"><a href="#2-2-2-数据卷命令" class="headerlink" title="2.2.2.数据卷命令"></a>2.2.2.数据卷命令</h4><p>数据卷的相关命令有：</p><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker volume create</td><td align="left">创建数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_create/">docker volume create</a></td></tr><tr><td align="left">docker volume ls</td><td align="left">查看所有数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_ls/">docs.docker.com</a></td></tr><tr><td align="left">docker volume rm</td><td align="left">删除指定数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docs.docker.com</a></td></tr><tr><td align="left">docker volume inspect</td><td align="left">查看某个数据卷的详情</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_inspect/">docs.docker.com</a></td></tr><tr><td align="left">docker volume prune</td><td align="left">清除数据卷</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/volume_prune/">docker volume prune</a></td></tr></tbody></table><blockquote><p><strong>注意：容器与数据卷的挂载要在创建容器时配置，对于创建好的容器，是不能设置数据卷的。而且创建容器的过程中，数据卷会自动创建。</strong></p></blockquote><p>删除原有的nginx然后重新创建，并挂在到数据卷上（没有数据卷会自动创建）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -v html:/usr/share/nginx/html nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker volume <span class="built_in">ls</span> 查看数据卷列表</span><br><span class="line"></span><br><span class="line">docker volume inspect html look details</span><br></pre></td></tr></table></figure><p><img src="C:\Users\末影\AppData\Roaming\Typora\typora-user-images\image-20240420191816721.png" alt="image-20240420191816721"></p><p>而mysql在创建时已经挂载了一个匿名卷</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;volume&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>可以发现，其中有几个关键属性：</p><ul><li>Name：数据卷名称。由于定义容器未设置容器名，这里的就是匿名卷自动生成的名字，一串hash值。</li><li>Source：宿主机目录</li><li>Destination : 容器内的目录</li></ul><p>上述配置是将容器内的<code>/var/lib/mysql</code>这个目录，与数据卷<code>29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f</code>挂载。于是在宿主机中就有了<code>/var/lib/docker/volumes/29524ff09715d3688eae3f99803a2796558dbd00ca584a25a4bbc193ca82459f/_data</code>这个目录。这就是匿名数据卷对应的目录，其使用方式与普通数据卷没有差别。</p><h4 id="2-2-3-挂载本地目录或文件"><a href="#2-2-3-挂载本地目录或文件" class="headerlink" title="2.2.3.挂载本地目录或文件"></a>2.2.3.挂载本地目录或文件</h4><p>可以发现，数据卷的目录结构较深，如果我们去操作数据卷目录会不太方便。在很多情况下，我们会直接将容器目录与宿主机指定目录挂载。挂载语法与数据卷类似：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载本地目录</span></span><br><span class="line">-v 本地目录:容器内目录</span><br><span class="line"><span class="comment"># 挂载本地文件</span></span><br><span class="line">-v 本地文件:容器内文件</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：本地目录或文件必须以 <code>/</code> 或 <code>./</code>开头，如果直接以名字开头，会被识别为数据卷名而非本地目录名。</p></blockquote><p>例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v mysql:/var/lib/mysql <span class="comment"># 会被识别为一个数据卷叫mysql，运行时会自动创建这个数据卷</span></span><br><span class="line">-v ./mysql:/var/lib/mysql <span class="comment"># 会被识别为当前目录下的mysql目录，运行时如果不存在会创建目录</span></span><br></pre></td></tr></table></figure><h3 id="2-3-镜像"><a href="#2-3-镜像" class="headerlink" title="2.3.镜像"></a>2.3.镜像</h3><p>前面我们一直在使用别人准备好的镜像，那如果我要部署一个Java项目，把它打包为一个镜像该怎么做呢？</p><h4 id="2-3-1-镜像结构"><a href="#2-3-1-镜像结构" class="headerlink" title="2.3.1.镜像结构"></a>2.3.1.镜像结构</h4><p>要想自己构建镜像，必须先了解镜像的结构。</p><p>之前我们说过，镜像之所以能让我们快速跨操作系统部署应用而忽略其运行环境、配置，就是因为镜像中包含了程序运行需要的系统函数库、环境、配置、依赖。</p><p>因此，自定义镜像本质就是依次准备好程序运行的基础环境、依赖、应用本身、运行配置等文件，并且打包而成。</p><p>举个例子，我们要从0部署一个Java应用，大概流程是这样：</p><ul><li>准备一个linux服务（CentOS或者Ubuntu均可）</li><li>安装并配置JDK</li><li>上传Jar包</li><li>运行jar包</li></ul><p>那因此，我们打包镜像也是分成这么几步：</p><ul><li>准备Linux运行环境（java项目并不需要完整的操作系统，仅仅是基础运行环境即可）</li><li>安装并配置JDK</li><li>拷贝jar包</li><li>配置启动脚本</li></ul><p>上述步骤中的每一次操作其实都是在生产一些文件（系统运行环境、函数库、配置最终都是磁盘文件），所以<strong>镜像就是一堆文件的集合</strong>。</p><p>但需要注意的是，镜像文件不是随意堆放的，而是按照操作的步骤分层叠加而成，每一层形成的文件都会单独打包并标记一个唯一id，称为<strong>Layer</strong>（<strong>层</strong>）。这样，如果我们构建时用到的某些层其他人已经制作过，就可以直接拷贝使用这些层，而不用重复制作。</p><p><img src="C:\Users\末影\Downloads\download_image.png" alt="download_image"></p><h4 id="2-3-2-Dockerfile"><a href="#2-3-2-Dockerfile" class="headerlink" title="2.3.2.Dockerfile"></a>2.3.2.Dockerfile</h4><p>由于制作镜像的过程中，需要逐层处理和打包，比较复杂，所以Docker就提供了自动打包镜像的功能。我们只需要将打包的过程，每一层要做的事情用固定的语法写下来，交给Docker去执行即可。</p><p>而这种记录镜像结构的文件就称为<strong>Dockerfile</strong>，其对应的语法可以参考官方文档：</p><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p>其中的语法比较多，比较常用的有：</p><table><thead><tr><th align="left"><strong>指令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>示例</strong></th></tr></thead><tbody><tr><td align="left"><strong>FROM</strong></td><td align="left">指定基础镜像</td><td align="left"><code>FROM centos:6</code></td></tr><tr><td align="left"><strong>ENV</strong></td><td align="left">设置环境变量，可在后面指令使用</td><td align="left"><code>ENV key value</code></td></tr><tr><td align="left"><strong>COPY</strong></td><td align="left">拷贝本地文件到镜像的指定目录</td><td align="left"><code>COPY ./xx.jar /tmp/app.jar</code></td></tr><tr><td align="left"><strong>RUN</strong></td><td align="left">执行Linux的shell命令，一般是安装过程的命令</td><td align="left"><code>RUN yum install gcc</code></td></tr><tr><td align="left"><strong>EXPOSE</strong></td><td align="left">指定容器运行时监听的端口，是给镜像使用者看的</td><td align="left">EXPOSE 8080</td></tr><tr><td align="left"><strong>ENTRYPOINT</strong></td><td align="left">镜像中应用的启动命令，容器运行时调用</td><td align="left">ENTRYPOINT java -jar xx.jar</td></tr></tbody></table><p>比如构建一个Java应用，其dockerfile可以这样写</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录、容器内时区</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="language-bash"> &amp;&amp; <span class="built_in">mv</span> ./jdk1.8.0_144 ./java8</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="comment"># 指定项目监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>simple demo:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-jre-buster</span><br><span class="line"><span class="comment"># 设定时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="comment"># 拷贝jar包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> hm-service.jar /app.jar</span></span><br><span class="line"><span class="comment"># 入口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>以后我们会有很多很多java项目需要打包为镜像，他们都需要Linux系统环境、JDK环境这两层，只有上面的3层不同（因为jar包不同）。如果每次制作java镜像都重复制作前两层镜像，是不是很麻烦。</p><p>所以，就有人提供了基础的系统加JDK环境，我们在此基础上制作java镜像，就可以省去JDK的配置了：</p><p>首先，将黑马提供的<code>docker-demo.jar</code>包以及<code>Dockerfile</code>拷贝到虚拟机的<code>/root/demo</code>目录：</p><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=NjIxZDFjZWNmNGIwOGE3NjE0N2Y5YzlmYzhmZGQ5N2VfR2ZDMFFiNXNsV3huM1FSOW8yaHdOeEJMRVJueElIZm5fVG9rZW46RGFOeGJ3Tjg0bzdtRWx4N3A0OGNRU1NTbnJlXzE3MTM2MjY4OTM6MTcxMzYzMDQ5M19WNA" alt="img"></p><p>然后，执行命令，构建镜像：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入镜像目录</span></span><br><span class="line"><span class="built_in">cd</span> /root/demo</span><br><span class="line"><span class="comment"># 开始构建</span></span><br><span class="line">docker build -t docker-demo:1.0 .</span><br></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>docker build </code>: 就是构建一个docker镜像</li><li><code>-t docker-demo:1.0</code> ：<code>-t</code>参数是指定镜像的名称（<code>repository</code>和<code>tag</code>）</li><li><code>.</code> : 最后的点是指构建时Dockerfile所在路径，由于我们进入了demo目录，所以指定的是<code>.</code>代表当前目录，也可以直接指定Dockerfile目录：<ul><li><pre><code class="Bash"># 直接指定Dockerfile目录docker build -t docker-demo:1.0 /root/demo<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建并运行该容器</span><br><span class="line"></span><br><span class="line">![image-20240420215031073](C:\Users\末影\AppData\Roaming\Typora\typora-user-images\image-20240420215031073.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2.4.网络</span><br><span class="line"></span><br><span class="line">首先，我们查看下MySQL容器的详细信息，重点关注其中的网络IP地址：</span><br><span class="line"></span><br><span class="line">```Bash</span><br><span class="line"># 1.用基本命令，寻找Networks.bridge.IPAddress属性</span><br><span class="line">docker inspect mysql</span><br><span class="line"># 也可以使用format过滤结果</span><br><span class="line">docker inspect --format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;println .IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; mysql</span><br><span class="line"># 得到IP地址如下：</span><br><span class="line">172.17.0.2</span><br><span class="line"></span><br><span class="line"># 2.然后通过命令进入dd容器</span><br><span class="line">docker exec -it dd bash</span><br><span class="line"></span><br><span class="line"># 3.在容器内，通过ping命令测试网络</span><br><span class="line">ping 172.17.0.2</span><br><span class="line"># 结果</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.053 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.058 ms</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><p>发现可以互联，没有问题。</p><p>但是，容器的网络IP其实是个虚拟的IP，它的值并不固定或是与某个容器绑定，每次重启某个容器的时候都有可能发生变化，所以我们不能直接写死</p><p>所以，我们必须借助于docker的网络功能来解决这个问题，官方文档：</p><p><a href="https://docs.docker.com/engine/reference/commandline/network/">https://docs.docker.com/engine/reference/commandline/network/</a></p><p>常见命令有：</p><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>文档地址</strong></th></tr></thead><tbody><tr><td align="left">docker network create</td><td align="left">创建一个网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_create/">docker network create</a></td></tr><tr><td align="left">docker network ls</td><td align="left">查看所有网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_ls/">docs.docker.com</a></td></tr><tr><td align="left">docker network rm</td><td align="left">删除指定网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_rm/">docs.docker.com</a></td></tr><tr><td align="left">docker network prune</td><td align="left">清除未使用的网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_prune/">docs.docker.com</a></td></tr><tr><td align="left">docker network connect</td><td align="left">使指定容器连接加入某网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_connect/">docs.docker.com</a></td></tr><tr><td align="left">docker network disconnect</td><td align="left">使指定容器连接离开某网络</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_disconnect/">docker network disconnect</a></td></tr><tr><td align="left">docker network inspect</td><td align="left">查看网络详细信息</td><td align="left"><a href="https://docs.docker.com/engine/reference/commandline/network_inspect/">docker network inspect</a></td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create moying //创建一个网络</span><br><span class="line"></span><br><span class="line">docker network <span class="built_in">ls</span> 查看网络</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">639bc44d0a87   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">403f16ec62a2   moying     bridge    <span class="built_in">local</span></span><br><span class="line">0dc0f72a0fbb   host      host      <span class="built_in">local</span></span><br><span class="line">cd8d3e8df47b   none      null      <span class="built_in">local</span></span><br><span class="line"><span class="comment"># 其中，除了moying以外，其它都是默认的网络</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将项目与网络连接起来</span></span><br><span class="line">docker network connect moying <span class="built_in">dd</span></span><br><span class="line">docker network connect moying mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>OK，现在无需记住IP地址也可以实现容器互联了。</p><p>默认的网络不支持name连接</p><h2 id="3-项目部署"><a href="#3-项目部署" class="headerlink" title="3.项目部署"></a>3.项目部署</h2><p>首先使用黑马提供的项目文件</p><p>项目说明：</p><ul><li>hmall：商城的后端代码</li><li>hmall-portal：商城用户端的前端代码</li><li>hmall-admin：商城管理端的前端代码</li></ul><p>部署的容器及端口说明：</p><table><thead><tr><th align="left"><strong>项目</strong></th><th align="left"><strong>容器名</strong></th><th align="left"><strong>端口</strong></th><th align="left"><strong>备注</strong></th></tr></thead><tbody><tr><td align="left">hmall</td><td align="left">hmall</td><td align="left">8080</td><td align="left">黑马商城后端API入口</td></tr><tr><td align="left">hmall-portal</td><td align="left">nginx</td><td align="left">18080</td><td align="left">黑马商城用户端入口</td></tr><tr><td align="left">hmall-admin</td><td align="left">nginx</td><td align="left">18081</td><td align="left">黑马商城管理端入口</td></tr><tr><td align="left">mysql</td><td align="left">mysql</td><td align="left">3306</td><td align="left">数据库</td></tr></tbody></table><blockquote><p>部署之前，将之前的容器删除</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f nginx <span class="built_in">dd</span> hmall </span><br></pre></td></tr></table></figure><h3 id="3-1-部署Java项目"><a href="#3-1-部署Java项目" class="headerlink" title="3.1.部署Java项目"></a>3.1.部署Java项目</h3><p><code>hmall</code>项目是一个maven聚合项目，使用IDEA打开<code>hmall</code>项目，查看项目结构如图：</p><p><img src="C:\Users\末影\AppData\Roaming\Typora\typora-user-images\image-20240420233742237.png" alt="image-20240420233742237"></p><p>我们要部署的就是其中的<code>hm-service</code>，其中的配置文件采用了多环境的方式：</p><blockquote><p>application.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hm-service</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;hm.db.host&#125;:3306/hmall?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;hm.db.pw&#125;</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">default-enum-type-handler:</span> <span class="string">com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">update-strategy:</span> <span class="string">not_null</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.hmall:</span> <span class="string">debug</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">dateformat:</span> <span class="string">HH:mm:ss:SSS</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&quot;logs/$&#123;spring.application.name&#125;&quot;</span></span><br><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">黑马商城接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;黑马商城接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">zhanghuyi@itcast.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">虎哥</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.hmall.controller</span></span><br><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">classpath:hmall.jks</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">hmall123</span></span><br><span class="line">    <span class="attr">tokenTTL:</span> <span class="string">30m</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">excludePaths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/search/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/users/login</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/items/**</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/hi</span></span><br><span class="line"><span class="comment"># keytool -genkeypair -alias hmall -keyalg RSA -keypass hmall123 -keystore hmall.jks -storepass hmall123</span></span><br></pre></td></tr></table></figure><blockquote><p>application-dev.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">pw:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><blockquote><p>application-local.yaml</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hm:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.87</span><span class="number">.132</span> <span class="comment"># 修改为你自己的虚拟机IP地址</span></span><br><span class="line">    <span class="attr">pw:</span> <span class="number">123</span> <span class="comment"># 修改为docker中的MySQL密码</span></span><br></pre></td></tr></table></figure><p>其中application.yaml，JDBC的地址并未写死，而且读取变量</p><p>因为开发环境以及部署的时候mysql的密码和ip地址一般都是不一致的</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hm-service</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://$&#123;hm.db.host&#125;:3306/hmall?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;hm.db.pw&#125;</span></span><br></pre></td></tr></table></figure><p>在dev开发环境（也就是Docker部署时）采用了mysql作为地址，刚好是我们的mysql容器名，只要两者在一个网络，就一定能互相访问。</p><p>然后将项目打包后得到hm-service.jar 并将Dockerfile一同复制到虚拟机</p><p>部署项目：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.构建项目镜像，不指定tag，则默认为latest</span></span><br><span class="line">docker build -t hmall .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.查看镜像</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.创建并运行容器，并通过--network将其加入moying网络，这样才能通过容器名访问mysql</span></span><br><span class="line">docker run -d --name hmall --network moying -p 8080:8080 hmall</span><br></pre></td></tr></table></figure><h3 id="3-2-部署前端"><a href="#3-2-部署前端" class="headerlink" title="3.2.部署前端"></a>3.2.部署前端</h3><p><code>hmall-portal</code>和<code>hmall-admin</code>是前端代码，需要基于nginx部署。在课前资料中已经给大家提供了nginx的部署目录：</p><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=ZDhmN2Q1ZmQyMGUyNTU0YWZjZTc5ZmVmYmUyODAxNjVfa0FDOWM1anY4VE9CQnl6bDFEakhGTWZyN2REeGhDN25fVG9rZW46WFRuUGJ5T0RabzdDOER4TXI5Y2N3Qkdnbk9oXzE3MTM2Mjc4MDk6MTcxMzYzMTQwOV9WNA" alt="img"></p><p>其中：</p><ul><li><code>html</code>是静态资源目录，我们需要把<code>hmall-portal</code>以及<code>hmall-admin</code>都复制进去</li><li><code>nginx.conf</code>是nginx的配置文件，主要是完成对<code>html</code>下的两个静态资源目录做代理</li></ul><p>将nginx整个目录上传到虚拟机上</p><p><img src="https://b11et3un53m.feishu.cn/space/api/box/stream/download/asynccode/?code=NmE3NWQ4ZTY2NGMyNTVlMjMxNjM0NjNhZDcxMDlkOGJfWlhLWHR0ZFJwNDd1SUJHNnlzTWk3Nzd4ekxsZXlFMWhfVG9rZW46V0dMbmJQSWtKb0hOc2x4NnRuRGN0QXZLbnBmXzE3MTM2Mjc4NjM6MTcxMzYzMTQ2M19WNA" alt="img"></p><p>然后创建nginx容器并完成两个挂载：</p><ul><li>把<code>/root/nginx/nginx.conf</code>挂载到<code>/etc/nginx/nginx.conf</code></li><li>把<code>/root/nginx/html</code>挂载到<code>/usr/share/nginx/html</code></li></ul><p>由于需要让nginx同时代理hmall-portal和hmall-admin两套前端资源，因此我们需要暴露两个端口：</p><ul><li>18080：对应hmall-portal</li><li>18081：对应hmall-admin</li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d \</span></span><br><span class="line"><span class="language-bash">--name nginx \</span></span><br><span class="line"><span class="language-bash">-p 18080:18080 \</span></span><br><span class="line"><span class="language-bash">-p 18081:18081 \</span></span><br><span class="line"><span class="language-bash">-v /root/nginx/html:/usr/share/nginx/html \</span></span><br><span class="line"><span class="language-bash">-v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \</span></span><br><span class="line"><span class="language-bash">--network moying \</span></span><br><span class="line"><span class="language-bash">nginx</span></span><br></pre></td></tr></table></figure><h3 id="3-3-DockerCompose"><a href="#3-3-DockerCompose" class="headerlink" title="3.3.DockerCompose"></a>3.3.DockerCompose</h3><p>这种手动添加容器且后续扩展的时候都需要去用ps去查看容器情况，然后进行添加或者删除，非常麻烦，而且后续项目不止前后端以及mysql，加入各种中间件后，就很麻烦，且不易统一管理</p><p>而Docker Compose就可以帮助我们实现<strong>多个相互关联的Docker容器的快速部署</strong>。它允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器。</p><h4 id="3-3-1-基本语法"><a href="#3-3-1-基本语法" class="headerlink" title="3.3.1.基本语法"></a>3.3.1.基本语法</h4><p>docker-compose.yml文件的基本语法可以参考官方文档：</p><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">Compose file version 3 reference | Docker Docs</a></p><p>docker-compose文件中可以定义多个相互关联的应用容器，每一个应用容器被称为一个服务（service）。由于service就是在定义某个应用的运行时参数，因此与<code>docker run</code>参数非常相似。</p><p>举例来说，用docker run部署MySQL的命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line">  -v ./mysql/data:/var/lib/mysql \</span><br><span class="line">  -v ./mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">  -v ./mysql/init:/docker-entrypoint-initdb.d \</span><br><span class="line">  --network moying</span><br><span class="line">  mysql</span><br></pre></td></tr></table></figure><p>如果用<code>docker-compose.yml</code>文件来定义，就是这样：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">new</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">new:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">moying</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center"><strong>docker run 参数</strong></th><th align="center"><strong>docker compose 指令</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">–name</td><td align="center">container_name</td><td align="center">容器名称</td></tr><tr><td align="center">-p</td><td align="center">ports</td><td align="center">端口映射</td></tr><tr><td align="center">-e</td><td align="center">environment</td><td align="center">环境变量</td></tr><tr><td align="center">-v</td><td align="center">volumes</td><td align="center">数据卷配置</td></tr><tr><td align="center">–network</td><td align="center">networks</td><td align="center">网络</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/conf:/etc/mysql/conf.d&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./mysql/init:/docker-entrypoint-initdb.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">  <span class="attr">hmall:</span></span><br><span class="line">    <span class="attr">build:</span> </span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18080:18080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;18081:18081&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./nginx/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hmall</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">hm-net</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hm-net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">hmall</span></span><br></pre></td></tr></table></figure><h4 id="3-3-2-基础命令"><a href="#3-3-2-基础命令" class="headerlink" title="3.3.2.基础命令"></a>3.3.2.基础命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose [OPTIONS] [COMMAND]</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>类型</strong></th><th align="left"><strong>参数或指令</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">Options</td><td align="left">-f</td><td align="left">指定compose文件的路径和名称</td></tr><tr><td align="left"></td><td align="left">-p</td><td align="left">指定project名称。project就是当前compose文件中设置的多个service的集合，是逻辑概念</td></tr><tr><td align="left">Commands</td><td align="left">up</td><td align="left">创建并启动所有service容器</td></tr><tr><td align="left"></td><td align="left">down</td><td align="left">停止并移除所有容器、网络</td></tr><tr><td align="left"></td><td align="left">ps</td><td align="left">列出所有启动的容器</td></tr><tr><td align="left"></td><td align="left">logs</td><td align="left">查看指定容器的日志</td></tr><tr><td align="left"></td><td align="left">stop</td><td align="left">停止容器</td></tr><tr><td align="left"></td><td align="left">start</td><td align="left">启动容器</td></tr><tr><td align="left"></td><td align="left">restart</td><td align="left">重启容器</td></tr><tr><td align="left"></td><td align="left">top</td><td align="left">查看运行进程</td></tr><tr><td align="left"></td><td align="left">exec</td><td align="left">在指定的运行中容器中执行命令</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">rm</span> -f hm nginx </span><br><span class="line"></span><br><span class="line">docker rmi hmall</span><br><span class="line">启动所有, -d 参数是后台启动</span><br><span class="line">docker compose up -d </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 新东西 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聚合搜索系统</title>
      <link href="/2024/03/30/%E8%81%9A%E5%90%88%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/03/30/%E8%81%9A%E5%90%88%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="聚合搜索系统"><a href="#聚合搜索系统" class="headerlink" title="聚合搜索系统"></a>聚合搜索系统</h1><p><img src="C:\Users\末影\AppData\Roaming\Typora\typora-user-images\image-20240330204744024.png" alt="image-20240330204744024"></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>vue3</li><li>ant design vue</li><li></li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><h4 id="第一期"><a href="#第一期" class="headerlink" title="第一期"></a>第一期</h4><p>前端，后端初始化</p><p>前端页面开发，后端基本搜索接口</p><h4 id="第二期"><a href="#第二期" class="headerlink" title="第二期"></a>第二期</h4><p>数据抓取</p><p>聚合搜索接口开发</p><ul><li>适配器</li><li>门面模式</li></ul><p>elasticsearch 搭建</p><h4 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h4><p>elasticsearch使用 建表，读写数据，调用api，Java整合</p><p>数据同步（四种同步方式）</p><h4 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h4><p>保障接口稳定性</p><p>项目优化（关键词高亮，搜索建议，防抖节流）</p><p>先鸽一下。</p><hr><h2 id="第一期-1"><a href="#第一期-1" class="headerlink" title="第一期"></a>第一期</h2><p>前端初始化</p><p>后端初始化</p><p>前端页面开发，后端基本搜索接口</p><p>整合Axios</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//这里注意看官方开发文档，跟着走</span><br><span class="line">npm install -g @vue/cli </span><br><span class="line">//创建项目</span><br><span class="line">vue create antd-demo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用组件</span></span><br><span class="line">npm i --save ant-design-vue@4.x</span><br></pre></td></tr></table></figure><p>后端采用初始模板,根据需求更改sql</p><hr><p>前端瘦身，留下主页 indexPage</p><p>拆解页面</p><p>margin: 0 auto, </p><p>max-width: 1024px</p><p>用url记录页面搜索状态，当用户刷新页面时，能够还原之前的搜索状态</p><p>url &lt;&#x3D;&#x3D;&gt; 页面状态</p><p>核心技巧： 把同步状态改成单向，即只允许url来改变页面状态</p><ol><li>让用户操作时，改变url地址（点击搜索框时，进行填充,切换tab也要填充）</li><li>当url地址改变时，去改变页面状态(监听url的改变)</li></ol><p>首先设计动态路由  搜索和切换时参数记得别掉了</p><p>watchEffect 实现监听</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  searchValue.<span class="property">value</span> =&#123;</span><br><span class="line">    ...initSearchValue, <span class="comment">//兜底</span></span><br><span class="line">    <span class="attr">text</span>: route.<span class="property">query</span>.<span class="property">text</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="联调后端"><a href="#联调后端" class="headerlink" title="联调后端"></a>联调后端</h4><p>引入axios</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>构建实例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;http://localhost:9999/api&quot;</span>,<span class="comment">//添加前缀</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000000</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="comment">// &quot;Content-Type&quot;: &quot;application/json&quot;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);     <span class="comment">// 创建axios实例</span></span><br></pre></td></tr></table></figure><p>创建一个全局拦截器 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&quot;http://localhost:9999/api&quot;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000000</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="comment">// &quot;Content-Type&quot;: &quot;application/json&quot;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);     <span class="comment">// 创建axios实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">const</span> data = response.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance; <span class="comment">// 导出实例</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>引入文章查询接口</p><p>:::后续补充父组件向子组件传入数据的知识</p><p>目前简单使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父亲组件调用子组件且传递数据过去 </span></span><br><span class="line">&lt;postList :post-list=<span class="string">&quot;postPageList&quot;</span>/&gt;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">postList</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Array</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//   接收</span></span><br></pre></td></tr></table></figure><h2 id="第二期-1"><a href="#第二期-1" class="headerlink" title="第二期"></a>第二期</h2><ol><li>获取多种不同类型的数据源</li></ol><p>​  a. 文章（内部）</p><p>​  b. 用户（内部）</p><p>​  c. 图片 （外部,不是自己项目或者用户生成的数据）</p><p>​  d. 后面总结完加个视频（爬取）</p><ol start="2"><li>前后端搜索接口联调，跑通页面</li><li>分析现有问题 &#x3D; 》 优化， 聚合接口开发</li><li>安装es</li></ol><h4 id="获取数据源"><a href="#获取数据源" class="headerlink" title="获取数据源"></a>获取数据源</h4><h5 id="1、获取文章"><a href="#1、获取文章" class="headerlink" title="1、获取文章"></a>1、获取文章</h5><p>&#x3D;&#x3D;&#x3D;&gt; 爬虫 (悠着点)</p><p>抓取网站：xxxx.com</p><p>获取到文章后要入库（定时获取或者一次性）</p><p>感觉分情况而论，要是查的不严就可以先搜现爬</p><h5 id="数据抓取"><a href="#数据抓取" class="headerlink" title="数据抓取"></a>数据抓取</h5><ol><li>直接请求数据接口（最方便）✔</li><li>等网页渲染出明文内容后，从前端页面的内容抓取</li><li>动态请求，类似于谷歌校验人机&#x3D;&gt;无头浏览器: selenium, node.js puppeteer</li></ol><p>引入工具库 HttpClient, OKHttp ,RestTemplate, Hutool(推荐),</p><h5 id="数据抓取-✔"><a href="#数据抓取-✔" class="headerlink" title="数据抓取 ✔"></a>数据抓取 ✔</h5><p>1.分析数据源</p><p>2.拿到数据后，如何处理</p><p>3.存入数据库</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">crawlerJob</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PostService postService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PostEsDao postEsDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;current\&quot;:1,\&quot;pageSize\&quot;:8,\&quot;sortField\&quot;:\&quot;createTime\&quot;,\&quot;sortOrder\&quot;:\&quot;descend\&quot;,\&quot;category\&quot;:\&quot;文章\&quot;,\&quot;tags\&quot;:[],\&quot;reviewStatus\&quot;:1&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://www.code-nav.cn/api/post/search/page/vo&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpRequest.post(url)</span><br><span class="line">                .body(json)</span><br><span class="line">                .execute().body();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        Map&lt;String,Object&gt; data= JSONUtil.toBean(result,Map.class);</span><br><span class="line">        System.out.println(data);</span><br><span class="line">        List&lt;Post&gt;postList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data1</span> <span class="operator">=</span>(JSONObject) data.get(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">dataList</span> <span class="operator">=</span> data1.getJSONArray(<span class="string">&quot;records&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : dataList) &#123;</span><br><span class="line">            JSONObject record=(JSONObject) o;</span><br><span class="line">            <span class="type">Post</span> <span class="variable">post</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Post</span>();</span><br><span class="line"></span><br><span class="line">            post.setTags(record.getJSONArray(<span class="string">&quot;tags&quot;</span>).toString());</span><br><span class="line">            post.setContent(record.getStr(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">            post.setTitle(record.getStr(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">            post.setUserId(<span class="number">1774104110152880131L</span>);</span><br><span class="line">            System.out.println(post);</span><br><span class="line">            postList.add(post);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> postService.saveBatch(postList);</span><br><span class="line">        <span class="keyword">if</span>(b)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;数据爬取，且插入&#123;&#125;条&quot;</span>,postList.size());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;数据插入失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-用户获取"><a href="#2-用户获取" class="headerlink" title="2.用户获取"></a>2.用户获取</h5><p>额，自己的就够了，没必要的哥们</p><h5 id="3-图片获取-✔"><a href="#3-图片获取-✔" class="headerlink" title="3.图片获取 ✔"></a>3.图片获取 ✔</h5><p>实时抓取，我们网站不存这些数据，用户要搜的时候，直接从别人的网站抓取</p><p>获取到html文档，然后从中解析出需要的字段</p><p>jsoup库 —》自己看文档..</p><blockquote><p>抓取后，慢慢debug去拨开数据</p></blockquote><h4 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h4><p>搞一个pictureController ✔</p><p>— 感觉可以狠狠研究一下这个格式（后端工程）</p><ol><li>请求数量比较多，可能会收到浏览器的限制&#x3D;&#x3D;&gt;用一个接口完成</li><li>请求不同接口的参数不一致，增加前后端沟通成本</li><li>前端要写多个接口调用,重复代码</li></ol><h2 id="聚合接口"><a href="#聚合接口" class="headerlink" title="聚合接口"></a>聚合接口</h2><ol><li>请求数量比较多，可能会收到浏览器的限制&#x3D;&#x3D;&gt;用一个接口完成</li><li>请求不同接口的参数不一致，增加前后端沟通成本&#x3D;&gt; 用一个接口把请求参数统一，前端每次传固定的参数，后端去对参数进行转换</li><li>前端要写多个接口调用,重复代码&#x3D;&gt;用一个接口，通过不同参数去区分查询的数据源</li></ol><p>撸出一个SearchController ✔</p><h2 id="第三期-1"><a href="#第三期-1" class="headerlink" title="第三期"></a>第三期</h2><ol><li>聚合接口优化,支持前端更灵活的去取数据</li><li><strong>从0学习Elastic Stack (Elasticsearch)</strong></li><li>学习数据同步，怎么把一个数据库内的数据同步到其他数据库</li></ol><h3 id="聚合接口优化"><a href="#聚合接口优化" class="headerlink" title="聚合接口优化"></a>聚合接口优化</h3><p>新增 type or category ，通过不同参数去查询不同数据源</p><ol><li>如果category为空，那么搜索出所有数据</li><li>不为空<ul><li>合法则查询相应数据</li><li>否则报错</li></ul></li></ol><h4 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h4><p>当调用你接口的客户端，觉得麻烦的时候，你就得考虑，是不是得找个门卫了</p><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><ol><li>定制一个统一的规范（标准）什么数据源允许接入，需要满足哪些标准</li><li>假如说我们数据源已经支持搜索，但是原有的方法和参数和我们的规范不一致</li></ol><p>适配器的作用： 通过转换，让两个系统能够完成对接（转换器）</p><p>接入我们的系统，必须支持关键词搜索，分页搜索</p><p><strong>设计一个接口函数去统一规范，还可以减少后续的if else 的重复代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSource</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    Page&lt;T&gt;doSearch(String searchText,<span class="type">long</span> pageNum,<span class="type">long</span> pageSize);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注册器模式（本质也是单例）"><a href="#注册器模式（本质也是单例）" class="headerlink" title="注册器模式（本质也是单例）"></a>注册器模式（本质也是单例）</h4><ol><li><p>提前通过一个map或者其他容器存储好想要调用的对象</p></li><li><p>代码量少，可维护性高</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceRegister</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PictureSource pictureSource;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PostSource postSource;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserSource userSource;</span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, DataSource&lt;?&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化类时加载</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doInit</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String ,DataSource&lt;?&gt;&gt;() &#123;&#123;</span><br><span class="line">            put(SearchEnum.USER.getValue(), userSource);</span><br><span class="line">            put(SearchEnum.POST.getValue(), postSource);</span><br><span class="line">            put(SearchEnum.PICTURE.getValue(), pictureSource);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DataSource&lt;?&gt; getDataSourceByType(String type) &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该注解的方法在整个Bean初始化中的执行顺序：</span></span><br><span class="line"></span><br><span class="line">Constructor(构造方法) -&gt; <span class="meta">@Autowired(依赖注入)</span> -&gt; <span class="meta">@PostConstruct(注释的初始化方法)</span></span><br></pre></td></tr></table></figure><h3 id="前端踩坑点！！！"><a href="#前端踩坑点！！！" class="headerlink" title="前端踩坑点！！！"></a>前端踩坑点！！！</h3><blockquote><p>首先加入category之后 不仅需要点击搜索进行发送请求，然后改变tab的时候也需要</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onChangeTab</span> = (<span class="params">category</span>) =&gt; &#123;</span><br><span class="line">  router.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">`/<span class="subst">$&#123;category&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">query</span>: searchValue.<span class="property">value</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">LoadData</span>(searchValue.<span class="property">value</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;<span class="comment">//使用then，不然会是跳转前的tab。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  searchValue.<span class="property">value</span> = &#123;</span><br><span class="line">    ...initSearchValue, <span class="comment">//兜底</span></span><br><span class="line">    <span class="attr">text</span>: route.<span class="property">query</span>.<span class="property">text</span>,</span><br><span class="line">    <span class="attr">category</span>: route.<span class="property">params</span>.<span class="property">category</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后就是发现，额之前那个调用LoadAllData()会出问题，md</p><p>前端简直就是magic啊</p><blockquote><p>要是watch用的6的话，也可以用这个吧</p></blockquote><h3 id="搜索优化"><a href="#搜索优化" class="headerlink" title="搜索优化"></a>搜索优化</h3><p>搜索不够灵活</p><p>仅仅靠数据库的like的话</p><h2 id="Elastic-Stack-一套技术栈"><a href="#Elastic-Stack-一套技术栈" class="headerlink" title="Elastic Stack(一套技术栈)"></a>Elastic Stack(一套技术栈)</h2><p>官网：<a href="https://www.elastic.co/">https://www.elastic.co/</a></p><p>包含了数据的整合&#x3D;&gt;提取，存储&#x3D;&gt;使用，一整套</p><p>beats: 从各种不同类型的文件&#x2F;<strong>应用来采集数据</strong></p><p>Logstash: 从多个采集器或者数据源来抽取&#x2F;转换数据</p><p>Elasticsearch: 存储，查询数据  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/zip-windows.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/zip-windows.html</a></p><p>kibana: 可视化es的数据 <a href="https://www.elastic.co/guide/en/kibana/7.17/windows.html">https://www.elastic.co/guide/en/kibana/7.17/windows.html</a></p><h4 id="安装-es-kibana"><a href="#安装-es-kibana" class="headerlink" title="安装 es kibana"></a>安装 es kibana</h4><p>记得版本一致： 7.17</p><h3 id="Elasticsearch概念"><a href="#Elasticsearch概念" class="headerlink" title="Elasticsearch概念"></a><strong>Elasticsearch概念</strong></h3><p>Index 索引 &#x3D; &gt; mySql 里面的table</p><p>建表 ，crud（查询重点）</p><p>用客户端取调用Elasticsearch(3种)</p><p>语法： SQL,代码的方法(4种语法（现在学）)</p><p>能够自动分词？能够高效，灵活的查询内容</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>正向索引：类似于书籍的目录，可以快速找到对应的内容（根据页码找到文章）</p><p>倒排索引：</p><p>切词，根据内容找到对应内容</p><h3 id="ES的调用方式"><a href="#ES的调用方式" class="headerlink" title="ES的调用方式"></a>ES的调用方式</h3><ol><li>restful api (http请求)      get &#x2F;</li></ol><p>localhost:9200 给外部用户的接口</p><p>localhost:9300 给es集群内部通信的，外部调用不了</p><ol start="2"><li><p>kibana    <strong>devTools</strong>(不建议生产环境使用)</p><p>自由地对es进行操作（本质也是resful api）</p></li><li><p>Java客户端</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/_getting_started.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/_getting_started.html</a></p></li></ol><p><strong>kibana：</strong></p><p><a href="http://localhost:5601/app/home#">http://localhost:5601/app/home#</a></p><h3 id="ES的语法"><a href="#ES的语法" class="headerlink" title="ES的语法:"></a>ES的语法:</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-filter-context.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-filter-context.html</a></p><p><strong>DSL</strong>      </p><p>建表，插入数据</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">curl -X POST <span class="string">&quot;localhost:9200/logs-my_app-default/_doc?pretty&quot;</span> -H &#x27;Content-Type<span class="punctuation">:</span> application/json&#x27; -d&#x27;</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2099-05-06T16:21:15.000Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;event&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;original&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.0.2.42 - - [06/May/2099:16:21:15 +0000] \&quot;GET /images/bg.jpg HTTP/1.0\&quot; 200 24736&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET logs-my_app-default/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE _data_stream/logs-my_app-default</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST mytest/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mytest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dec&quot;</span><span class="punctuation">:</span> <span class="string">&quot;there is desc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">PUT mytest/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mytest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dec&quot;</span><span class="punctuation">:</span> <span class="string">&quot;there is desc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">13</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><p>建议使用介个（成本低嘛主要是）</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">POST /_sql?format=txt</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SELECT * FROM mytest&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Mapping-（数据库表结构）"><a href="#Mapping-（数据库表结构）" class="headerlink" title="Mapping （数据库表结构）"></a>Mapping （数据库表结构）</h3><h2 id="第四期-1"><a href="#第四期-1" class="headerlink" title="第四期"></a>第四期</h2><ol><li><p>继续ElasticStack</p></li><li><p>学习用Java来调用ElasticStack</p></li><li><p>使用es优化聚合搜索接口</p></li><li><p>已有的DB的数据和ES数据同步（增量，全量，实时，非实时）</p></li><li><p>jeter压力测试</p></li><li><p>保证接口稳定性</p></li><li><p>其他拓展思路</p></li></ol><p>ES索引(index) &#x3D;&gt; 表</p><p>ES field （字段） &#x3D;&gt; 列</p><p>倒排索引</p><p>构建倒排索引表：</p><table><thead><tr><th>词</th><th>内容 id</th></tr></thead><tbody><tr><td>你好</td><td>文章 A，B</td></tr><tr><td>我是</td><td>文章 A，B</td></tr><tr><td>rapper</td><td>文章 A</td></tr><tr><td>鱼皮</td><td>文章 B</td></tr><tr><td>coder</td><td>文章 B</td></tr></tbody></table><p>调用语法（DSL,EQL,SQL)</p><p>Mapping(表结构)</p><ul><li><p>自动生成mapping</p></li><li><h6 id="手动指定mapping"><a href="#手动指定mapping" class="headerlink" title="手动指定mapping"></a>手动指定mapping</h6></li></ul><h4 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h4><p>分词的一种规则</p><p>空格分词器： whitespace</p><p>标准分词</p><p>关键词分词器：不分词，将整句话作为专业术语</p><h4 id="IK-分词器-ES插件"><a href="#IK-分词器-ES插件" class="headerlink" title="IK 分词器 (ES插件)"></a>IK 分词器 (ES插件)</h4><p>中文友好</p><p>下载地址：</p><p>怎么样让ik按自己的想法分词？</p><p>自定义词典</p><p>ik_smart 和ik_max_word 区别？</p><p>贪心和滑动窗口（bushi）</p><h4 id="打分机制"><a href="#打分机制" class="headerlink" title="打分机制"></a>打分机制</h4><p>内容：</p><ol><li>鱼皮是狗</li><li>鱼皮是小黑子</li><li>我是小黑子</li></ol><p>用户搜索：</p><ol><li>鱼皮——-&gt;第一条分数最高，相当于  2&#x2F;4（匹配了，而且更短（匹配比例大）</li></ol><h4 id="es调用方式（Java"><a href="#es调用方式（Java" class="headerlink" title="es调用方式（Java"></a>es调用方式（Java</h4><p>1）ES 官方的 Java API<br><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/introduction.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/introduction.html</a><br>快速开始：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/connecting.html">https://www.elastic.co/guide/en/elasticsearch/client/java-api-client/7.17/connecting.html</a></p><p>2）ES 以前的官方 Java API，HighLevelRestClient（已废弃，不建议用）</p><p>3）Spring Data Elasticsearch（推荐）</p><p>spring-data 系列：spring 提供的操作数据的框架<br>spring-data-redis：操作 redis 的一套方法<br>spring-data-mongodb：操作 mongodb 的一套方法<br>spring-data-elasticsearch：操作 elasticsearch 的一套方法</p><p>官方文档：<a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.4.10/reference/html/">https://docs.spring.io/spring-data/elasticsearch/docs/4.4.10/reference/html/</a></p><p>自定义方法：用户可以指定接口的方法名称，框架帮你自动生成查询</p><p>用es实现搜索接口</p><p>1.建立索引（建表）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 新东西，后端项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liunx踩坑之旅</title>
      <link href="/2024/03/27/Linux/"/>
      <url>/2024/03/27/Linux/</url>
      
        <content type="html"><![CDATA[<p>description:  三行太多了，写不来</p><hr><hr><hr><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h2><h3 id="文件基本操作篇"><a href="#文件基本操作篇" class="headerlink" title="文件基本操作篇"></a>文件基本操作篇</h3><p>这里主要是描述文件的移动，复制，粘贴，额，后续学的多了自然有更多操作，俺现在不知道啊。。。</p><h4 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//创建新的文件。。。</span><br><span class="line">touch your_file </span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">mkdir your_directories</span><br><span class="line">//创建多级目录加入参数</span><br><span class="line">mkdir -p father/son/grandson</span><br><span class="line"></span><br><span class="line">----------------------</span><br><span class="line"><span class="meta prompt_">cp---&gt;</span><span class="language-bash">文件复制</span></span><br><span class="line">cp your_file father/son/grandson</span><br><span class="line"></span><br><span class="line">复制目录的话需要加入参数-r | -R</span><br><span class="line">cp -r father family</span><br><span class="line">--------------</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">rm---&gt;</span><span class="language-bash">删除文件,嗨嗨删库跑路 sudo <span class="built_in">rm</span> -rf /*</span></span><br><span class="line">-f是如果想忽略g提示，直接删除文件，可以使用 -f 参数强制删除： -r递归执行</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mv---&gt;</span><span class="language-bash">移动文件，类似于Ctrl+x</span></span><br><span class="line">mv 源文件 目的目录</span><br><span class="line">mv test_file Documents </span><br><span class="line"></span><br><span class="line">--新玩法 重命名-----------&gt; mv 旧的文件名 新的文件名</span><br><span class="line">mv your_file new_your_file</span><br><span class="line"></span><br><span class="line">---批量重命名(rename)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先批量创建文件</span></span><br><span class="line">touch your_file&#123;1..5&#125;.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">批量改名--额，我的建议是去隔壁Java8看看正则表达式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不过这里还有涉及到sed命令，所以先写着，鸽子一下</span></span><br><span class="line">rename &#x27;s/\.txt/\.c/&#x27; *.txt</span><br></pre></td></tr></table></figure><h4 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h4><p><code>cat</code> —<code>tac</code> —<code>nl</code></p><p>如其名，tac是倒序显示</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat -n passwd 加上-n显示行号</span><br><span class="line"></span><br><span class="line">nl 命令，添加行号并打印，这是个比 cat -n 更专业的行号打印命令。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-b : 指定添加行号的方式，主要有两种：</span><br><span class="line">    -b a:表示无论是否为空行，同样列出行号(&quot;cat -n&quot;就是这种方式)</span><br><span class="line">    -b t:只列出非空行的编号并列出（默认为这种方式）</span><br><span class="line">-n : 设置行号的样式，主要有三种：</span><br><span class="line">    -n ln:在行号字段最左端显示</span><br><span class="line">    -n rn:在行号字段最右边显示，且不加 0</span><br><span class="line">    -n rz:在行号字段最右边显示，且加 0</span><br><span class="line">-w : 行号字段占用的位数(默认为 6 位)</span><br></pre></td></tr></table></figure><p>额，more和less讲得没这么多，鸽掉！！相当于只显示一个屏幕的信息而不是像cat那样，信息太多了，会让你的屏幕向下移动</p><p><code>tail head</code></p><p>这俩就相当于一个显示倒数几行，一个正数几行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> -n 10 /etc/passwd</span>                </span><br></pre></td></tr></table></figure><h4 id="查看文件类型"><a href="#查看文件类型" class="headerlink" title="查看文件类型"></a>查看文件类型</h4><p><code>file</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file your_file.xxx</span><br></pre></td></tr></table></figure><h4 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h4><p><code>whereis which find locate</code></p><p>挺多哈，find的话我感觉最重要。。目前我是用的多一些</p><hr><p><code>whereis</code> 只能搜索二进制文件(-b)，man 帮助文件(-m)和源代码文件(-s)。如果想要获得更全面的搜索结果可以使用 <code>locate</code> 命令。</p><hr><p>locate则不是内置命令，需要去安装，而且每次查找之前偶尔还得更新一下数据库</p><p>直接cv过来算了</p><blockquote><p>使用 <code>locate</code> 命令查找文件也不会遍历硬盘，它通过查询 <code>/var/lib/mlocate/mlocate.db</code> 数据库来检索信息。不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行 <code>updatedb</code> 命令来更新数据库。所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次 <code>updatedb</code> 命令（在我们的环境中必须先执行一次该命令）。注意这个命令也不是内置的命令，例如在我们的环境中就需要手动安装，然后执行更新。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;$ sudo apt-get update</span><br><span class="line">&gt;$ sudo apt-get install locate</span><br><span class="line">&gt;$ sudo updatedb</span><br></pre></td></tr></table></figure></blockquote><blockquote><blockquote><p>它可以用来查找指定目录下的不同文件类型，如查找 &#x2F;etc 下所有以 sh 开头的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ locate /etc/sh</span><br></pre></td></tr></table></figure></blockquote></blockquote><p>这个需要记得的还有，使用通配符的时候记得加上转义符号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locate /usr/share/\*.jpg</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;&#x3D;&#x3D;which鸽掉，俺也还没用过</p><h4 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h4><p>这个我觉得确实得单独拎出来,因为他这个-exec看着就很吊</p><blockquote><p>find [path][option] [action] </p></blockquote><p>先来讲讲参数吧</p><ul><li><p>-name  文件名匹配</p></li><li><p>-mtime 最后修改文件属性的时间 </p><ul><li><code>-mtime n</code>：n 为数字，表示为在 n 天之前的“一天之内”修改过的文件</li><li><code>-mtime +n</code>：列出在 n 天之前（不包含 n 天本身）被修改过的文件</li><li><code>-mtime -n</code>：列出在 n 天之内（包含 n 天本身）被修改过的文件</li><li><code>-newer file</code>：file 为一个已存在的文件，列出比 file 还要新的文件名</li></ul></li><li><p>-size  文件大小    +表示大于，-表示小于 默认单位b </p></li><li><p>-exec 对搜索到的文件进行命令, such 重命名，删除，移动</p><ul><li><pre><code class="shell">find ~ -size +1 -exec mv &#123;&#125; /temp \;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  - \;表示结束符号</span><br><span class="line">  </span><br><span class="line">- &#123;&#125;表示占位符，表示搜索到的文件</span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 文件打包，压缩篇</span><br><span class="line"></span><br><span class="line">这里描述的是关于zip，tar，gzip相关知识。</span><br><span class="line"></span><br><span class="line">#### tar相关</span><br><span class="line"></span><br><span class="line">- `-x`: 提取（解压）文件</span><br><span class="line">- `-z`: 使用gzip压缩格式</span><br><span class="line">- `-v`: 显示详细的输出信息</span><br><span class="line">- `-f`: 指定要操作的文件</span><br><span class="line">- `--wildcards`: 启用通配符模式</span><br><span class="line">- `&#x27;*example*&#x27;`: 匹配所有文件名中包含&quot;example&quot;的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 休闲娱乐</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">xeyes</span><br><span class="line"></span><br><span class="line">nohup xeyes &amp;//h</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="在Linux中使用帮助、"><a href="#在Linux中使用帮助、" class="headerlink" title="在Linux中使用帮助、"></a>在Linux中使用帮助、</h3><p>这个玩意难受哟，help，man，这些。。。感觉目前不太适合咱</p><h3 id="开发分割线——————————————"><a href="#开发分割线——————————————" class="headerlink" title="开发分割线——————————————-"></a>开发分割线——————————————-</h3><hr><h2 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h2><h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新东西 </tag>
            
            <tag> centos </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习</title>
      <link href="/2024/03/22/Java%E5%9F%BA%E7%A1%80/SpringCloud/"/>
      <url>/2024/03/22/Java%E5%9F%BA%E7%A1%80/SpringCloud/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8基础知识</title>
      <link href="/2024/03/22/Java%E5%9F%BA%E7%A1%80/Java8/"/>
      <url>/2024/03/22/Java%E5%9F%BA%E7%A1%80/Java8/</url>
      
        <content type="html"><![CDATA[<p>daisiki，在此见证Java8的预习，啊不，学习记录。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/03/19/%E7%AE%97%E6%B3%95/hello-world/"/>
      <url>/2024/03/19/%E7%AE%97%E6%B3%95/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> newTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的学习之路</title>
      <link href="/2024/03/19/%E5%89%8D%E7%AB%AF/Vue%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/03/19/%E5%89%8D%E7%AB%AF/Vue%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><p> (｡･∀･)ﾉﾞ，这还有啥why，混口饭吃，有个能创建网站的前置能力，已经很足够了</p><p><code>vue</code></p><h1 id="初始工程"><a href="#初始工程" class="headerlink" title="初始工程"></a>初始工程</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">创建命令</span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line">cd your_demo</span><br><span class="line">npm install</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_moudles 组件库</span><br><span class="line">public </span><br><span class="line">src 主要编写文件</span><br><span class="line">index.html 入口文件</span><br><span class="line">pack-lock.json package.json 配置依赖等</span><br><span class="line">vite.config..js 配置文件</span><br></pre></td></tr></table></figure><p><img src="C:\Users\末影\AppData\Roaming\Typora\typora-user-images\image-20240322173222513.png" alt="image-20240322173222513"></p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>作用： 根据已有数据计算新数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;person&quot;</span>&gt;</span></span><br><span class="line">        姓: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        全名: <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;  fullName &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeFullname&quot;</span>&gt;</span>全名改为：xxx<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;zhang&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;san&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 计算属性——只读取，不修改</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* let fullName = computed(()=&gt;&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    return firstName.value + &#x27;-&#x27; + lastName.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  &#125;) */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> firstName.<span class="property">value</span> +<span class="string">&quot;-&quot;</span>+lastName.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//修改</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;有人修改乐fullName&quot;</span>,val)</span></span><br><span class="line"><span class="language-javascript">        firstName.<span class="property">value</span>=val.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">        lastName.<span class="property">value</span>=val.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">changeFullname</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    fullName.<span class="property">value</span>=<span class="string">&quot;li-si&quot;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="！路由"><a href="#！路由" class="headerlink" title="！路由"></a>！路由</h1><p>害。。。速成嘛，就先重点路由吧</p><blockquote><p>导航区，展示区</p></blockquote><blockquote><p>指定路由的具体规则</p></blockquote><blockquote><p>形成一个个的xxx.vue</p></blockquote><p>需要提前想好路由工作模式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个路由器并且暴露出去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> person <span class="keyword">from</span> <span class="string">&#x27;@/views/person.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/News.vue&#x27;</span></span><br><span class="line"><span class="comment">//创建路由器(rnm，这里不要用&#123;&#125;把Home他们包起来)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">// 路由器的工作模式</span></span><br><span class="line">    <span class="comment">//配置路由</span></span><br><span class="line">    <span class="attr">routes</span>:[ <span class="comment">//一个个路由规则</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/person&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: person</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">           <span class="attr">component</span>: <span class="title class_">News</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router </span><br></pre></td></tr></table></figure><h2 id="【编程式导航】"><a href="#【编程式导航】" class="headerlink" title="【编程式导航】"></a>【编程式导航】</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>() <span class="comment">//解构传入的数据</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>() <span class="comment">//路由器，进行跳转</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">parmas</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">push</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">replace</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//news.vue</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;news in newsList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;news.id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">            path: &#x27;/news/detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">            query: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                id: news.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">                name: news.name,</span></span></span><br><span class="line"><span class="string"><span class="tag">                context: news.context,</span></span></span><br><span class="line"><span class="string"><span class="tag">                // News: news//不行</span></span></span><br><span class="line"><span class="string"><span class="tag">                car: car</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#125;</span></span></span><br><span class="line"><span class="string"><span class="tag">        &#125;&quot;</span>&gt;</span>&#123;&#123; news.name &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123; id &#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123; context &#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123; car&#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123; query.id &#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123; query.name &#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123; query.context &#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;&#123; query.car&#125;&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useRoute,useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;useDetailStore&#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/details&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//接受props</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>([<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;context&#x27;</span>,<span class="string">&#x27;car&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript">    ------</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> route=<span class="title function_">useRoute</span>() <span class="comment">//hook</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> router=<span class="title function_">useRouter</span>() <span class="comment">//路由器</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123;query&#125;= <span class="title function_">toRefs</span>(route) <span class="comment">//解构</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h2><p>有点类似与Java的ThreadLocal？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install pinia</span><br><span class="line"></span><br><span class="line"><span class="comment">//js中引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia=<span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app=<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(pinia)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先是在js文件中去定义数据以及方法，还有暴露出来</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import &#123; defineStore &#125; from &quot;pinia&quot;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// export const useDetailStore=defineStore(&#x27;details&#x27;,&#123;</span></span><br><span class="line"><span class="comment">//     state()&#123;</span></span><br><span class="line"><span class="comment">//         return &#123;</span></span><br><span class="line"><span class="comment">//             toy:&quot;atm&quot;,</span></span><br><span class="line"><span class="comment">//             sum: 666,</span></span><br><span class="line"><span class="comment">//             todayNews:[</span></span><br><span class="line"><span class="comment">//                 &#123;id:&#x27;yuysada01&#x27;,content:&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//                 &#123;id:&#x27;yuysada02&#x27;,content:&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;&#125;,</span></span><br><span class="line"><span class="comment">//                    &#123;id:&#x27;yuysada03&#x27;,content:&#x27;心里给你留了一块地，我的死心塌地&#x27;&#125;</span></span><br><span class="line"><span class="comment">//             ]</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     //计算</span></span><br><span class="line"><span class="comment">//     getters:&#123;&#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//组合式写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useDetailStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;detials&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> toy = <span class="title function_">ref</span>(<span class="string">&#x27;atm&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> todayNews = <span class="title function_">ref</span>([</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&#x27;yuysada01&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&#x27;yuysada02&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="string">&#x27;yuysada03&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span> &#125;</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">const</span> sum = <span class="title function_">ref</span>(<span class="number">399</span>)</span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">change</span>=(<span class="params">newToy</span>)=&gt;&#123;</span><br><span class="line">    toy.<span class="property">value</span>=newToy</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;toy,todayNews,sum,change&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而接收的话也是有好几种的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useDetailStore&#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/details&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">//先定义出来</span></span><br><span class="line"><span class="keyword">const</span> detailStore=<span class="title function_">useDetailStore</span>()</span><br><span class="line"><span class="comment">//第一，直接解构出来</span></span><br><span class="line"><span class="keyword">const</span> &#123;toy,sum,todayNews&#125; = <span class="title function_">storeToRefs</span>(detailStore)</span><br><span class="line"><span class="comment">//第二,不再是响应式</span></span><br><span class="line"><span class="comment">// let toy=detailStore.toy</span></span><br><span class="line"><span class="comment">// let sum=detailStore.sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//感觉有点迷糊</span></span><br><span class="line"><span class="comment">// let toy=ref(detailStore.toy)</span></span><br><span class="line"><span class="comment">// let sum=ref(detailStore.sum)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//details.js中</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">change</span>=(<span class="params">newToy</span>)=&gt;&#123;</span><br><span class="line">    toy.<span class="property">value</span>=newToy</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeStore</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// detailStore.$patch(&#123;</span></span><br><span class="line">  <span class="comment">//   toy: &quot;wlgq&quot;,</span></span><br><span class="line">  <span class="comment">//   sum: 555</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  toy.<span class="property">value</span>=<span class="string">&quot;aiodsjfodis&quot;</span></span><br><span class="line">  detailStore.<span class="title function_">change</span>(toy.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新东西 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme主题介绍</title>
      <link href="/2018/09/07/%E7%A4%BA%E4%BE%8B/"/>
      <url>/2018/09/07/%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
